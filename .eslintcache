[{"D:\\Project\\BTl-web\\src\\index.tsx":"1","D:\\Project\\BTl-web\\src\\app\\App.tsx":"2","D:\\Project\\BTl-web\\src\\app\\components\\SplashScreen.tsx":"3","D:\\Project\\BTl-web\\src\\app\\redux\\index.ts":"4","D:\\Project\\BTl-web\\src\\app\\routes\\index.tsx":"5","D:\\Project\\BTl-web\\src\\app\\redux\\modules\\root.ts":"6","D:\\Project\\BTl-web\\src\\app\\redux\\modules\\loading\\index.ts":"7","D:\\Project\\BTl-web\\src\\app\\pages\\NotFound.tsx":"8","D:\\Project\\BTl-web\\src\\app\\constants\\index.ts":"9","D:\\Project\\BTl-web\\src\\app\\redux\\modules\\loading\\reducer.ts":"10","D:\\Project\\BTl-web\\src\\app\\redux\\modules\\loading\\actions.ts":"11","D:\\Project\\BTl-web\\src\\app\\layouts\\MainLayout.tsx":"12","D:\\Project\\BTl-web\\src\\app\\pages\\home\\index.tsx":"13","D:\\Project\\BTl-web\\src\\app\\pages\\home\\banner\\index.tsx":"14","D:\\Project\\BTl-web\\src\\app\\pages\\home\\genre\\index.tsx":"15","D:\\Project\\BTl-web\\src\\app\\components\\Common\\header\\index.tsx":"16","D:\\Project\\BTl-web\\src\\app\\components\\Common\\button\\index.tsx":"17","D:\\Project\\BTl-web\\src\\app\\components\\Common\\controller\\index.tsx":"18","D:\\Project\\BTl-web\\src\\app\\data\\song.ts":"19","D:\\Project\\BTl-web\\src\\app\\components\\Common\\mode-button\\index.tsx":"20","D:\\Project\\BTl-web\\src\\app\\components\\Common\\icon-button\\index.tsx":"21","D:\\Project\\BTl-web\\src\\app\\redux\\modules\\player\\index.ts":"22","D:\\Project\\BTl-web\\src\\app\\redux\\modules\\player\\actions.ts":"23","D:\\Project\\BTl-web\\src\\app\\redux\\modules\\player\\reducer.ts":"24","D:\\Project\\BTl-web\\src\\app\\components\\Common\\nowplaying\\index.tsx":"25","D:\\Project\\BTl-web\\src\\app\\constants\\pagination.ts":"26","D:\\Project\\BTl-web\\src\\app\\api\\explore.ts":"27","D:\\Project\\BTl-web\\src\\app\\api\\index.ts":"28","D:\\Project\\BTl-web\\src\\app\\constants\\api.ts":"29","D:\\Project\\BTl-web\\src\\app\\components\\Common\\card1\\index.tsx":"30","D:\\Project\\BTl-web\\src\\app\\components\\Common\\card2\\index.tsx":"31","D:\\Project\\BTl-web\\src\\app\\helpers\\player.ts":"32","D:\\Project\\BTl-web\\src\\app\\pages\\album-page\\index.tsx":"33","D:\\Project\\BTl-web\\src\\app\\pages\\home\\chart\\index.tsx":"34","D:\\Project\\BTl-web\\src\\app\\components\\Common\\song-list\\index.tsx":"35","D:\\Project\\BTl-web\\src\\app\\pages\\singer-detail\\index.tsx":"36","D:\\Project\\BTl-web\\src\\app\\components\\Common\\song-slide\\index.tsx":"37","D:\\Project\\BTl-web\\src\\app\\components\\Common\\album-slide\\index.tsx":"38","D:\\Project\\BTl-web\\src\\app\\components\\Common\\not-found-item\\index.tsx":"39","D:\\Project\\BTl-web\\src\\app\\pages\\search\\index.tsx":"40","D:\\Project\\BTl-web\\src\\app\\components\\Common\\card-singer\\index.tsx":"41","D:\\Project\\BTl-web\\src\\app\\pages\\search\\component\\singer-list\\index.tsx":"42","D:\\Project\\BTl-web\\src\\app\\pages\\search\\component\\search-tab-content\\index.tsx":"43","D:\\Project\\BTl-web\\src\\app\\pages\\search\\component\\song-list\\index.tsx":"44","D:\\Project\\BTl-web\\src\\app\\pages\\search\\component\\singer-slide\\index.tsx":"45","D:\\Project\\BTl-web\\src\\app\\pages\\search\\component\\album-list\\index.tsx":"46","D:\\Project\\BTl-web\\src\\app\\components\\Common\\sidebar\\index.tsx":"47","D:\\Project\\BTl-web\\src\\app\\components\\LoadingOverlay.tsx":"48","D:\\Project\\BTl-web\\src\\app\\pages\\genre-detail\\index.tsx":"49","D:\\Project\\BTl-web\\src\\app\\pages\\genre-list\\index.tsx":"50","D:\\Project\\music-web-btl\\music-web-fe\\src\\index.tsx":"51","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\App.tsx":"52","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\SplashScreen.tsx":"53","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\index.ts":"54","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\routes\\index.tsx":"55","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\root.ts":"56","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\loading\\index.ts":"57","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\constants\\index.ts":"58","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\loading\\reducer.ts":"59","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\loading\\actions.ts":"60","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\layouts\\MainLayout.tsx":"61","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\player\\index.ts":"62","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\singer-list\\index.tsx":"63","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\home\\index.tsx":"64","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\album-detail\\index.tsx":"65","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\genre-list\\index.tsx":"66","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\genre-detail\\index.tsx":"67","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\search\\index.tsx":"68","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\singer-detail\\index.tsx":"69","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\player\\actions.ts":"70","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\player\\reducer.ts":"71","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\ScrollToTop.tsx":"72","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\constants\\pagination.ts":"73","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\api\\explore.ts":"74","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\helpers\\player.ts":"75","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\home\\banner\\index.tsx":"76","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\home\\chart\\index.tsx":"77","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\home\\genre\\index.tsx":"78","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\search\\component\\singer-slide\\index.tsx":"79","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\search\\component\\search-tab-content\\index.tsx":"80","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\search\\component\\singer-list\\index.tsx":"81","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\search\\component\\song-list\\index.tsx":"82","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\search\\component\\album-list\\index.tsx":"83","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\header\\index.tsx":"84","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\controller\\index.tsx":"85","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\sidebar\\index.tsx":"86","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\loading\\index.tsx":"87","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\card-singer\\index.tsx":"88","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\album-slide\\index.tsx":"89","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\song-slide\\index.tsx":"90","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\button\\index.tsx":"91","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\song-list\\index.tsx":"92","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\card2\\index.tsx":"93","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\card1\\index.tsx":"94","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\scroll-to-top-button\\index.tsx":"95","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\not-found-item\\index.tsx":"96","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\nowplaying\\index.tsx":"97","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\icon-button\\index.tsx":"98","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\data\\banner-image.ts":"99","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\api\\index.ts":"100","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\helpers\\pagination.ts":"101","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\hooks\\useClickOutside.ts":"102","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\mode-button\\index.tsx":"103","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\constants\\api.ts":"104","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\search\\component\\custom-pagination\\index.tsx":"105","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\facebook-button\\index.tsx":"106","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\api\\auth.ts":"107","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\auth\\index.ts":"108","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\auth\\actions.ts":"109","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\auth\\reducer.ts":"110","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\modal-login\\index.tsx":"111"},{"size":524,"mtime":1606853588268,"results":"112","hashOfConfig":"113"},{"size":743,"mtime":1606844613908,"results":"114","hashOfConfig":"113"},{"size":641,"mtime":1606842749193,"results":"115","hashOfConfig":"113"},{"size":358,"mtime":1607877160397,"results":"116","hashOfConfig":"113"},{"size":1421,"mtime":1608129550138,"results":"117","hashOfConfig":"113"},{"size":459,"mtime":1608053272563,"results":"118","hashOfConfig":"113"},{"size":56,"mtime":1606842749232,"results":"119","hashOfConfig":"113"},{"size":790,"mtime":1606844908734,"results":"120","hashOfConfig":"113"},{"size":501,"mtime":1608126857159,"results":"121","hashOfConfig":"113"},{"size":409,"mtime":1608053096051,"results":"122","hashOfConfig":"113"},{"size":242,"mtime":1608053112971,"results":"123","hashOfConfig":"113"},{"size":843,"mtime":1608053766812,"results":"124","hashOfConfig":"113"},{"size":2842,"mtime":1608055465730,"results":"125","hashOfConfig":"113"},{"size":2480,"mtime":1608055131621,"results":"126","hashOfConfig":"113"},{"size":5022,"mtime":1608034368249,"results":"127","hashOfConfig":"113"},{"size":7563,"mtime":1608129636263,"results":"128","hashOfConfig":"113"},{"size":1995,"mtime":1606854706725,"results":"129","hashOfConfig":"113"},{"size":8799,"mtime":1608061284168,"results":"130","hashOfConfig":"113"},{"size":3293,"mtime":1607867694254,"results":"131","hashOfConfig":"113"},{"size":1080,"mtime":1607880856554,"results":"132","hashOfConfig":"113"},{"size":433,"mtime":1607955923014,"results":"133","hashOfConfig":"113"},{"size":56,"mtime":1607876466990,"results":"134","hashOfConfig":"113"},{"size":1798,"mtime":1607882203081,"results":"135","hashOfConfig":"113"},{"size":2445,"mtime":1608056881398,"results":"136","hashOfConfig":"113"},{"size":935,"mtime":1608060376198,"results":"137","hashOfConfig":"113"},{"size":100,"mtime":1606842749196,"results":"138","hashOfConfig":"113"},{"size":5877,"mtime":1608127187886,"results":"139","hashOfConfig":"113"},{"size":880,"mtime":1606845210489,"results":"140","hashOfConfig":"113"},{"size":797,"mtime":1607888554615,"results":"141","hashOfConfig":"113"},{"size":2627,"mtime":1608027621171,"results":"142","hashOfConfig":"113"},{"size":2510,"mtime":1608129118904,"results":"143","hashOfConfig":"113"},{"size":644,"mtime":1608055773812,"results":"144","hashOfConfig":"113"},{"size":3351,"mtime":1608125484183,"results":"145","hashOfConfig":"113"},{"size":3222,"mtime":1608060360001,"results":"146","hashOfConfig":"113"},{"size":4862,"mtime":1608125561863,"results":"147","hashOfConfig":"113"},{"size":3116,"mtime":1608058514751,"results":"148","hashOfConfig":"113"},{"size":2895,"mtime":1608049639047,"results":"149","hashOfConfig":"113"},{"size":2917,"mtime":1608034229207,"results":"150","hashOfConfig":"113"},{"size":510,"mtime":1608018732298,"results":"151","hashOfConfig":"113"},{"size":9317,"mtime":1608054601794,"results":"152","hashOfConfig":"113"},{"size":1347,"mtime":1608024298323,"results":"153","hashOfConfig":"113"},{"size":823,"mtime":1608028537476,"results":"154","hashOfConfig":"113"},{"size":590,"mtime":1608025146381,"results":"155","hashOfConfig":"113"},{"size":946,"mtime":1608028501757,"results":"156","hashOfConfig":"113"},{"size":2204,"mtime":1608034283399,"results":"157","hashOfConfig":"113"},{"size":1530,"mtime":1608028493294,"results":"158","hashOfConfig":"113"},{"size":2255,"mtime":1608051424559,"results":"159","hashOfConfig":"113"},{"size":563,"mtime":1608054733882,"results":"160","hashOfConfig":"113"},{"size":6753,"mtime":1608129486668,"results":"161","hashOfConfig":"113"},{"size":2701,"mtime":1608129733595,"results":"162","hashOfConfig":"113"},{"size":524,"mtime":1606853588268,"results":"163","hashOfConfig":"164"},{"size":451,"mtime":1608353231269,"results":"165","hashOfConfig":"164"},{"size":709,"mtime":1608535642585,"results":"166","hashOfConfig":"164"},{"size":414,"mtime":1608486090268,"results":"167","hashOfConfig":"164"},{"size":1489,"mtime":1608228382035,"results":"168","hashOfConfig":"164"},{"size":522,"mtime":1608484289236,"results":"169","hashOfConfig":"164"},{"size":56,"mtime":1606842749232,"results":"170","hashOfConfig":"164"},{"size":306,"mtime":1608205308806,"results":"171","hashOfConfig":"164"},{"size":409,"mtime":1608053096051,"results":"172","hashOfConfig":"164"},{"size":242,"mtime":1608053112971,"results":"173","hashOfConfig":"164"},{"size":1352,"mtime":1608311603301,"results":"174","hashOfConfig":"164"},{"size":56,"mtime":1607876466990,"results":"175","hashOfConfig":"164"},{"size":3240,"mtime":1608483586018,"results":"176","hashOfConfig":"164"},{"size":3500,"mtime":1608490306159,"results":"177","hashOfConfig":"164"},{"size":4962,"mtime":1608516847437,"results":"178","hashOfConfig":"164"},{"size":2329,"mtime":1608311644635,"results":"179","hashOfConfig":"164"},{"size":10298,"mtime":1608387660072,"results":"180","hashOfConfig":"164"},{"size":9422,"mtime":1608305743897,"results":"181","hashOfConfig":"164"},{"size":3243,"mtime":1608227476171,"results":"182","hashOfConfig":"164"},{"size":1570,"mtime":1608535504666,"results":"183","hashOfConfig":"164"},{"size":2247,"mtime":1608535526916,"results":"184","hashOfConfig":"164"},{"size":465,"mtime":1608316429388,"results":"185","hashOfConfig":"164"},{"size":38,"mtime":1608306822583,"results":"186","hashOfConfig":"164"},{"size":5248,"mtime":1608313824864,"results":"187","hashOfConfig":"164"},{"size":644,"mtime":1608189614880,"results":"188","hashOfConfig":"164"},{"size":2082,"mtime":1608297041428,"results":"189","hashOfConfig":"164"},{"size":4146,"mtime":1608387528806,"results":"190","hashOfConfig":"164"},{"size":2758,"mtime":1608230446902,"results":"191","hashOfConfig":"164"},{"size":2204,"mtime":1608189676561,"results":"192","hashOfConfig":"164"},{"size":590,"mtime":1608025146381,"results":"193","hashOfConfig":"164"},{"size":847,"mtime":1608305941198,"results":"194","hashOfConfig":"164"},{"size":3232,"mtime":1608323432497,"results":"195","hashOfConfig":"164"},{"size":1546,"mtime":1608217981307,"results":"196","hashOfConfig":"164"},{"size":7224,"mtime":1608494886203,"results":"197","hashOfConfig":"164"},{"size":9836,"mtime":1608520943611,"results":"198","hashOfConfig":"164"},{"size":3156,"mtime":1608494284128,"results":"199","hashOfConfig":"164"},{"size":579,"mtime":1608211969881,"results":"200","hashOfConfig":"164"},{"size":1786,"mtime":1608210397815,"results":"201","hashOfConfig":"164"},{"size":2925,"mtime":1608231160710,"results":"202","hashOfConfig":"164"},{"size":2845,"mtime":1608230377748,"results":"203","hashOfConfig":"164"},{"size":1995,"mtime":1606854706725,"results":"204","hashOfConfig":"164"},{"size":4346,"mtime":1608298018292,"results":"205","hashOfConfig":"164"},{"size":3357,"mtime":1608459786574,"results":"206","hashOfConfig":"164"},{"size":3320,"mtime":1608459452802,"results":"207","hashOfConfig":"164"},{"size":488,"mtime":1608315890299,"results":"208","hashOfConfig":"164"},{"size":510,"mtime":1608018732298,"results":"209","hashOfConfig":"164"},{"size":1797,"mtime":1608462271345,"results":"210","hashOfConfig":"164"},{"size":433,"mtime":1607955923014,"results":"211","hashOfConfig":"164"},{"size":1011,"mtime":1608296798245,"results":"212","hashOfConfig":"164"},{"size":1049,"mtime":1608488314909,"results":"213","hashOfConfig":"164"},{"size":1186,"mtime":1608535562336,"results":"214","hashOfConfig":"164"},{"size":434,"mtime":1608310213907,"results":"215","hashOfConfig":"164"},{"size":1105,"mtime":1608316991764,"results":"216","hashOfConfig":"164"},{"size":232,"mtime":1608487904360,"results":"217","hashOfConfig":"164"},{"size":1968,"mtime":1608321466561,"results":"218","hashOfConfig":"164"},{"size":869,"mtime":1608516953533,"results":"219","hashOfConfig":"164"},{"size":430,"mtime":1608488344461,"results":"220","hashOfConfig":"164"},{"size":56,"mtime":1608483654020,"results":"221","hashOfConfig":"164"},{"size":814,"mtime":1608492141766,"results":"222","hashOfConfig":"164"},{"size":569,"mtime":1608486334914,"results":"223","hashOfConfig":"164"},{"size":740,"mtime":1608494401938,"results":"224","hashOfConfig":"164"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},"1umjt4i",{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"227"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"227"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"227"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"227"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"227"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"227"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"227"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"227"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"227"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"273"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"227"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"227"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"304","messages":"305","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"227"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"309","messages":"310","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"227"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"227"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"227"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"227"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"227"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"227"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"227"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"344","messages":"345","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},"1nsy80g",{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"348"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"348"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"348"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"348"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"348"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"348"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"348"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"348"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"348"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"348"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"348"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"348"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"348"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"348"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"348"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"348"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"348"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"348"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"348"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"348"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"348"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"479"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"348"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"348"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"348"},"D:\\Project\\BTl-web\\src\\index.tsx",[],["492","493"],"D:\\Project\\BTl-web\\src\\app\\App.tsx",["494"],"import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux\";\r\nimport { Routes } from \"./routes\";\r\nimport LoadingOverlay from \"./components/LoadingOverlay\";\r\nimport { SplashScreen } from \"./components/SplashScreen\";\r\n// import { PersistGate } from \"redux-persist/integration/react\";\r\n\r\nconst { PUBLIC_URL } = process.env;\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<Provider store={store}>\r\n\t\t\t{/* <PersistGate persistor={persistor} loading={<SplashScreen />}> */}\r\n\t\t\t\t<React.Suspense fallback={<SplashScreen />}>\r\n\t\t\t\t\t\t<Routes basename={PUBLIC_URL} />\r\n\t\t\t\t\t\t{/* <LoadingOverlay />\r\n\t\t\t\t\t\t<ToastContainer /> */}\r\n\t\t\t\t</React.Suspense>\r\n\t\t\t{/* </PersistGate> */}\r\n\t\t</Provider>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","D:\\Project\\BTl-web\\src\\app\\components\\SplashScreen.tsx",["495"],"import { FunctionComponent, useEffect } from \"react\";\r\nimport { enableLoading, disableLoading } from \"../redux/modules/loading\";\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface Props {\r\n\tenableLoading: (opacity?: number) => void;\r\n\tdisableLoading: () => void;\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n\tenableLoading,\r\n\tdisableLoading,\r\n};\r\n\r\nconst BaseSplashScreen: FunctionComponent<Props> = ({\r\n\tenableLoading,\r\n\tdisableLoading,\r\n}) => {\r\n\tuseEffect(() => {\r\n\t\tenableLoading(1);\r\n\t\treturn () => {\r\n\t\t\tdisableLoading();\r\n\t\t};\r\n\t}, []);\r\n\treturn null;\r\n};\r\n\r\nexport const SplashScreen = connect(null, mapDispatchToProps)(BaseSplashScreen);\r\n","D:\\Project\\BTl-web\\src\\app\\redux\\index.ts",["496","497"],"import configureStore from \"./configureStore\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { rootReducer } from './modules/root';\r\n\r\n// const { store, persistor } = configureStore();\r\n\r\n// export { persistor };\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default store;\r\n","D:\\Project\\BTl-web\\src\\app\\routes\\index.tsx",["498"],"D:\\Project\\BTl-web\\src\\app\\redux\\modules\\root.ts",[],"D:\\Project\\BTl-web\\src\\app\\redux\\modules\\loading\\index.ts",[],"D:\\Project\\BTl-web\\src\\app\\pages\\NotFound.tsx",["499","500"],"import React from \"react\";\r\nimport { toAbsoluteUrl } from \"../helpers\";\r\n// import styled from \"styled-components\";\r\n\r\nexport default () => {\r\n\treturn (\r\n\t\t<div>Not found\r\n\t\t\t{/* <BackgroundImage src={toAbsoluteUrl(\"media/error/bg1.jpg\")} />\r\n\t\t\t<Container>\r\n\t\t\t\t<Title>404</Title>\r\n\t\t\t\t<SubTitle>OOPS! Something went wrong</SubTitle>\r\n\t\t\t</Container> */}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n// const BackgroundImage = styled.img`\r\n// \tobject-fit: cover;\r\n// \twidth: 100vw;\r\n// \theight: 100vh;\r\n// `;\r\n\r\n// const Container = styled.div`\r\n// \tposition: absolute;\r\n// \ttop: 0;\r\n// \tleft: 0;\r\n// \tpadding: 2rem;\r\n// \tz-index: 1;\r\n// `;\r\n\r\n// const Title = styled.h1`\r\n// \tfont-size: 10rem;\r\n// \tfont-weight: 400;\r\n// `;\r\n\r\n// const SubTitle = styled.h2`\r\n// \tfont-size: 2rem;\r\n// \tfont-weight: 400;\r\n// `;\r\n","D:\\Project\\BTl-web\\src\\app\\constants\\index.ts",[],"D:\\Project\\BTl-web\\src\\app\\redux\\modules\\loading\\reducer.ts",[],"D:\\Project\\BTl-web\\src\\app\\redux\\modules\\loading\\actions.ts",[],"D:\\Project\\BTl-web\\src\\app\\layouts\\MainLayout.tsx",[],"D:\\Project\\BTl-web\\src\\app\\pages\\home\\index.tsx",["501"],"import { fetchAllChart, fetchExplore } from 'app/api/explore';\r\nimport AlbumSlide from 'app/components/Common/album-slide';\r\nimport SongSlide from 'app/components/Common/song-slide';\r\nimport LoadingOverlay from 'app/components/LoadingOverlay';\r\nimport { Album } from 'app/models/Album';\r\nimport { Genre } from 'app/models/Genre';\r\nimport { Song } from 'app/models/Song';\r\nimport { RootState } from 'app/redux';\r\nimport { enableLoading, disableLoading } from 'app/redux/modules/loading';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Banner from './banner';\r\nimport Chart from './chart';\r\nimport GenreList from './genre';\r\nimport './style.scss';\r\n\r\nconst Home: React.FC = () => {\r\n\tconst dispatch = useDispatch();\r\n    const { isLoading } = useSelector((state: RootState) => state.loading);\r\n\tconst [latestSongs, setLatestSongs] = useState<Array<Song>>([]);\r\n\tconst [latestAlbums, setLatestAlbums] = useState<Array<Album>>([]);\r\n\tconst [genres, setGenres] = useState<Array<Genre>>([]);\r\n\tconst [charts, setCharts] = useState<Array<{\r\n\t\tarea: string,\r\n\t\ttitle: string,\r\n\t\tsongs: Array<Song>\r\n\t}>>([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(enableLoading());\r\n\r\n\t\tfetchExplore()\r\n\t\t  .then((data) => {\r\n\t\t\tsetLatestSongs(data.latestSongs);\r\n\t\t\tsetLatestAlbums(data.latestAlbums);\r\n\t\t\tsetGenres(data.genres);\r\n\r\n\t\t\tlet chart: Array<{\r\n\t\t\t\tarea: string,\r\n\t\t\t\ttitle: string,\r\n\t\t\t\tsongs: Array<Song>\r\n\t\t\t}> = [];\r\n\r\n\t\t\tfetchAllChart()\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tlet { kpop, vpop, usuk } = res;\r\n\r\n\t\t\t\t\tchart.push({\r\n\t\t\t\t\t\tarea: 'VPOP',\r\n\t\t\t\t\t\ttitle: 'V-POP',\r\n\t\t\t\t\t\tsongs: vpop,\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tchart.push({\r\n\t\t\t\t\t\tarea: 'USUK',\r\n\t\t\t\t\t\ttitle: 'US-UK',\r\n\t\t\t\t\t\tsongs: usuk,\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tchart.push({\r\n\t\t\t\t\t\tarea: 'KPOP',\r\n\t\t\t\t\t\ttitle: 'K-POP',\r\n\t\t\t\t\t\tsongs: kpop,\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tsetCharts(chart);\r\n\t\t\t\t\tdispatch(disableLoading());\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t\tdispatch(disableLoading());\r\n\t\t\t\t});\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tdispatch(disableLoading());\r\n\t\t});\r\n\t  }, []);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"homepage-container h-100\">\r\n\t\t\t\t<Banner />\r\n\r\n\t\t\t\t<LoadingOverlay />\r\n\r\n\t\t\t\t{!isLoading ? (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<div className=' latest-song slide-container bg-slide'>\r\n\t\t\t\t\t\t\t<SongSlide \r\n\t\t\t\t\t\t\t\ttitle='Latest Song 🔥'\r\n\t\t\t\t\t\t\t\tsongList={latestSongs}\r\n\t\t\t\t\t\t\t\tisPlayAll\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div className='slide-container bg-slide'>\r\n\t\t\t\t\t\t\t<AlbumSlide \r\n\t\t\t\t\t\t\t\ttitle='Latest Album ⚡'\r\n\t\t\t\t\t\t\t\talbumList={latestAlbums}\r\n\t\t\t\t\t\t\t\tcolorBg\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='slide-container bg-slide'>\r\n\t\t\t\t\t\t\t<GenreList genreList={genres}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<Chart charts={charts}/>\r\n\t\t\t\t\t</>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Home;\r\n","D:\\Project\\BTl-web\\src\\app\\pages\\home\\banner\\index.tsx",["502","503","504"],"import './style.scss';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport SwiperCore, { Pagination, Autoplay } from 'swiper';\r\nimport Austronaut from './images/slide-image.png';\r\nimport CustomButton from 'app/components/Common/button';\r\nimport 'swiper/components/pagination/pagination.scss';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport ArrowRight from 'assets/images/arrow-right-icon.svg';\r\n\r\nSwiperCore.use([Pagination, Autoplay]);\r\n\r\nconst songs = [\r\n\t{\r\n\t\timg: Austronaut,\r\n\t\tminted: 1758,\r\n\t\tleft: 8242,\r\n\t\tpumpkins: 20,\r\n\t},\r\n\t{\r\n\t\timg: Austronaut,\r\n\t\tminted: 1758,\r\n\t\tleft: 8242,\r\n\t\tpumpkins: 20,\r\n\t},\r\n\t{\r\n\t\timg: Austronaut,\r\n\t\tminted: 1758,\r\n\t\tleft: 8242,\r\n\t\tpumpkins: 20,\r\n\t},\r\n\t{\r\n\t\timg: Austronaut,\r\n\t\tminted: 1758,\r\n\t\tleft: 8242,\r\n\t\tpumpkins: 20,\r\n\t},\r\n];\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nconst Banner: React.FC<Props> = (props: Props) => {\r\n\tconst imagesSlide = songs.map((song, index) => (\r\n\t\t<SwiperSlide \r\n\t\t\tkey={ index } \r\n\t\t\tclassName=\"banner-slide\" \r\n\t\t\ttag=\"li\">\r\n\t\t\t<div className=\"img-slide\">\r\n\t\t\t\t<img src={ song.img }></img>\r\n\t\t\t</div>\r\n\t\t</SwiperSlide>\r\n\t));\r\n\r\n\tconst handleScroll = () => {\r\n\t\tlet content = document.getElementsByClassName('latest-song');\r\n\t\tcontent[0].scrollIntoView({behavior: 'smooth'})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<section className='banner'>\r\n\t\t\t<Row className='justify-content-between align-items-center'>\r\n\t\t\t\t<Col lg={ 6 }>\r\n\t\t\t\t\t<div className='banner-left'>\r\n\t\t\t\t\t\t<div className=\"txt-banner\">\r\n\t\t\t\t\t\t\tLet&nbsp;\r\n\t\t\t\t\t\t\t<span className=\"txt-special\">Music Flow In Your Heart</span> And&nbsp;\r\n\t\t\t\t\t\t\t<span className=\"txt-special\">Enrich Your Soul</span>&nbsp;✌️\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div className='discover-btn'>\r\n\t\t\t\t\t\t\t<CustomButton\r\n\t\t\t\t\t\t\t\tsize='large'\r\n\t\t\t\t\t\t\t\tcolor='black'\r\n\t\t\t\t\t\t\t\tshape='round'\r\n\t\t\t\t\t\t\t\tonClick={handleScroll}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t<span className='mrc-12px'>Discovery</span>\r\n\t\t\t\t\t\t\t\t\t<img src={ArrowRight}></img>\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t</CustomButton>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Col>\r\n\t\t\t\t\r\n\t\t\t\t<Col lg={ 6 }>\r\n\t\t\t\t\t<div className=\"slide-block\">\r\n\t\t\t\t\t\t<Swiper\r\n\t\t\t\t\t\t\tslidesPerView=\"auto\"\r\n\t\t\t\t\t\t\tspaceBetween={4}\r\n\t\t\t\t\t\t\tpagination={{\r\n\t\t\t\t\t\t\t\tel: \".swiper-pagination\", // little dots under the slides for navigation\r\n\t\t\t\t\t\t\t\tclickable: true\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tautoplay\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{imagesSlide}\r\n\t\t\t\t\t\t</Swiper>\r\n\r\n\t\t\t\t\t\t<div className=\"swiper-pagination\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport default Banner;\r\n","D:\\Project\\BTl-web\\src\\app\\pages\\home\\genre\\index.tsx",["505","506"],"import React from 'react';\r\nimport './style.scss';\r\nimport GenreCard from 'app/components/Common/card2';\r\nimport Austronaut from './images/post1.png';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport SwiperCore, { Navigation } from 'swiper';\r\nimport PreviousButton from 'assets/images/arrow-left.svg';\r\nimport NextButton from 'assets/images/arrow-right.svg';\r\nimport { Genre } from 'app/models/Genre';\r\nimport { useHistory } from 'react-router';\r\nimport { RoutePaths } from 'app/constants';\r\n\r\nconst collectors = [\r\n    {\r\n        img: 'https://photo-resize-zmp3.zadn.vn/w480_r1x1_jpeg/cover/5/e/0/2/5e02add03a731b2ed06bbfe64b4d9b0f.jpg',\r\n        name: 'Colorway',\r\n        author: 'Jenny.K',\r\n        sold: 1.25,\r\n        price: '301.25',\r\n        reacts: 3000,\r\n        imgAuthor: Austronaut\r\n    },\r\n    {\r\n        img: 'https://photo-resize-zmp3.zadn.vn/w480_r1x1_jpeg/cover/5/e/0/2/5e02add03a731b2ed06bbfe64b4d9b0f.jpg',\r\n        name: 'Colorway',\r\n        author: 'Jenny.K',\r\n        sold: 1.25,\r\n        price: '301.25',\r\n        reacts: 3000,\r\n        imgAuthor: Austronaut\r\n    },\r\n    {\r\n        img: 'https://photo-resize-zmp3.zadn.vn/w480_r1x1_jpeg/cover/5/e/0/2/5e02add03a731b2ed06bbfe64b4d9b0f.jpg',\r\n        name: 'Colorway',\r\n        author: 'Jenny.K',\r\n        sold: 1.25,\r\n        price: '301.25',\r\n        reacts: 3000,\r\n        imgAuthor: Austronaut\r\n    },\r\n    {\r\n        img: 'https://photo-resize-zmp3.zadn.vn/w480_r1x1_jpeg/cover/5/e/0/2/5e02add03a731b2ed06bbfe64b4d9b0f.jpg',\r\n        name: 'Colorway',\r\n        author: 'Jenny.K',\r\n        sold: 1.25,\r\n        price: '301.25',\r\n        reacts: 3000,\r\n        imgAuthor: Austronaut\r\n    },\r\n    {\r\n        img: 'https://photo-resize-zmp3.zadn.vn/w480_r1x1_jpeg/cover/5/e/0/2/5e02add03a731b2ed06bbfe64b4d9b0f.jpg',\r\n        name: 'Colorway',\r\n        author: 'Jenny.K',\r\n        sold: 1.25,\r\n        price: '301.25',\r\n        reacts: 3000,\r\n        imgAuthor: Austronaut\r\n    },\r\n    {\r\n        img: 'https://photo-resize-zmp3.zadn.vn/w480_r1x1_jpeg/cover/5/e/0/2/5e02add03a731b2ed06bbfe64b4d9b0f.jpg',\r\n        name: 'Colorway',\r\n        author: 'Jenny.K',\r\n        sold: 1.25,\r\n        price: '301.25',\r\n        reacts: 3000,\r\n        imgAuthor: Austronaut\r\n    },\r\n\r\n    {\r\n        img: 'https://photo-resize-zmp3.zadn.vn/w480_r1x1_jpeg/cover/5/e/0/2/5e02add03a731b2ed06bbfe64b4d9b0f.jpg',\r\n        name: 'Colorway',\r\n        author: 'Jenny.K',\r\n        sold: 1.25,\r\n        price: '301.25',\r\n        reacts: 3000,\r\n        imgAuthor: Austronaut\r\n    },\r\n    {\r\n        img: 'https://photo-resize-zmp3.zadn.vn/w480_r1x1_jpeg/cover/5/e/0/2/5e02add03a731b2ed06bbfe64b4d9b0f.jpg',\r\n        name: 'Colorway',\r\n        author: 'Jenny.K',\r\n        sold: 1.25,\r\n        price: '301.25',\r\n        reacts: 3000,\r\n        imgAuthor: Austronaut\r\n    },\r\n\r\n];\r\n\r\nSwiperCore.use([Navigation]);\r\n\r\ninterface Props {\r\n    genreList: Array<Genre>,\r\n}\r\n\r\nconst GenreList: React.FC<Props> = (props: Props) => {\r\n    const { genreList } = props;\r\n    const history = useHistory();\r\n\r\n    const handleNavigate = (genre: Genre) => {\r\n        history.push(`${RoutePaths.Genre.Index}/${genre.genre_id}/${genre.title}`);\r\n    }\r\n\r\n    const genreSlide = genreList.map((genre) => {\r\n        return (\r\n            <SwiperSlide key={genre.genre_id} className=\"genre__post\" >\r\n                <GenreCard\r\n                    {...genre}\r\n                    handleNavigate={() => handleNavigate(genre)}\r\n                    isGenre={true}\r\n                />\r\n            </SwiperSlide>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <section className=\"genre slide\">\r\n            <div className=\"slide-header\">\r\n                <div className=\"d-flex align-items-end\">\r\n                    <h3 className='section-title'>\r\n                        Genre 🧐\r\n                    </h3>\r\n                    <a className='txt-link'>\r\n                        View all\r\n                    </a>\r\n                </div>\r\n                <div>\r\n                    <img\r\n                        className=\"genre__swiper-prev\"\r\n                        src={ PreviousButton }\r\n                        alt=\"Previous slide\"\r\n                    />\r\n                    <img className=\"genre__swiper-next\" src={ NextButton } alt=\"Next slide\" />\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"genre__content\">\r\n                {genreList.length ? (\r\n                    <Swiper\r\n                        slidesPerView=\"auto\"\r\n                        wrapperTag=\"ul\"\r\n                        navigation={{\r\n                            nextEl: \".genre__swiper-next\",\r\n                            prevEl: \".genre__swiper-prev\",\r\n                            disabledClass: \"genre__swiper-button--disabled\",\r\n                        }}\r\n                    >\r\n                        { genreSlide }\r\n                    </Swiper>\r\n                ) : null}\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default GenreList;\r\n","D:\\Project\\BTl-web\\src\\app\\components\\Common\\header\\index.tsx",["507"],"D:\\Project\\BTl-web\\src\\app\\components\\Common\\button\\index.tsx",["508"],"import React from 'react';\r\nimport './style.scss';\r\nimport { Button } from 'react-bootstrap';\r\n \r\ninterface Props {\r\n    text?: string,\r\n    iconLeft?: SVGAElement,\r\n    name?: string,\r\n    children?: any,\r\n    color: string,\r\n    classNames?: Array<string>,\r\n    icon?: any,\r\n    shape?: string,\r\n    size?: string,\r\n    target?: string,\r\n    onClick: () => void\r\n}\r\n\r\nconst CustomButtonField: React.FC<Props> = (props: Props) => {\r\n\r\n    const { \r\n        text,\r\n        classNames, \r\n        icon,\r\n        shape, \r\n        size, \r\n        onClick, \r\n        children,\r\n        color = 'pink',\r\n    } = props;\r\n\r\n    let overrideClassNames:any = ['custom-btn'];\r\n\r\n    const renderContent = () => {\r\n        return (\r\n            <>\r\n                {icon && icon}\r\n                {children\r\n                    // <span>\r\n                    //     {text}\r\n                    // </span>\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    const initArgs = () => {\r\n        if (size === 'large') {\r\n            overrideClassNames.push('custom-btn--large')\r\n        } else {\r\n            overrideClassNames.push('custom-btn--small')\r\n        }\r\n    \r\n        if (color === 'red') {\r\n            overrideClassNames.push('custom-btn--color-red')\r\n        }\r\n\r\n        if (color === 'black') {\r\n            overrideClassNames.push('custom-btn--color-black')\r\n        }\r\n    \r\n        if (shape === 'circle') {\r\n            overrideClassNames.push('custom-btn--shape-circle')\r\n        }\r\n    \r\n        if (shape === 'round') {\r\n            overrideClassNames.push('custom-btn--shape-round')\r\n        }\r\n\r\n        if (classNames && classNames.length) {\r\n            overrideClassNames = overrideClassNames.concat(classNames)\r\n        } \r\n    }\r\n\r\n    initArgs();\r\n\r\n    return (\r\n        <Button \r\n            className={ overrideClassNames.join(' ') }\r\n            onClick={ onClick }>\r\n            { renderContent() }\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default CustomButtonField;\r\n","D:\\Project\\BTl-web\\src\\app\\components\\Common\\controller\\index.tsx",["509","510","511","512","513","514"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport Slider from 'react-input-slider';\r\nimport ModeButton from '../mode-button';\r\nimport './style.scss';\r\nimport PrevIcon from 'assets/images/prev-icon.svg';\r\nimport PlayIcon from 'assets/images/play-icon.svg';\r\nimport PauseIcon from 'assets/images/pause-icon.svg';\r\nimport NextIcon from 'assets/images/next-icon.svg';\r\nimport PlaylistIcon from 'assets/images/playlist.svg';\r\nimport IconButton from '../icon-button';\r\nimport NowPlaying from '../nowplaying';\r\nimport { RootState } from 'app/redux';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { counter, shuffle, skipMusic, togglePlayMusic } from 'app/redux/modules/player';\r\nimport { Dropdown } from 'react-bootstrap';\r\nimport MoreIcon from 'assets/images/more-icon.svg';\r\n\r\nconst convertTime = (time: number) => {\r\n    let minute = Math.floor(time/60);\r\n    let second = Math.floor(time%60);\r\n    let fullSecond = '0'.repeat(2 - second.toString().split('').length) + second.toString();\r\n    return `${minute}:${fullSecond}`;\r\n}\r\n\r\nconst Controller: React.FC = () => {\r\n    const { songs, isPlaying, songIndex } = useSelector((state: RootState) => state.player);\r\n    const dispatch = useDispatch();\r\n    // Time for slider\r\n    const [currentTime, setCurrentTime] = useState<number>(0);\r\n    const [duration, setDuration] = useState<number>(0);\r\n    // Play mode\r\n    const [isShuffle, setShuffle] = useState<boolean>(false);\r\n    const [isRepeat, setIsRepeat] = useState<boolean>(false);  \r\n    // Show playing list\r\n    const [showPlayingList, setShowPlayingList] = useState<boolean>(false);\r\n    \r\n    const audioRef = useRef(new Audio(songIndex !== -1 ? songs[songIndex].url : ''));\r\n\r\n    useEffect(() => {\r\n        audioRef.current.src = songs[songIndex].url;\r\n    }, [songIndex]);\r\n\r\n    useEffect(() => {\r\n        if (isPlaying) {\r\n            audioRef.current.play();\r\n        } else {\r\n            audioRef.current.pause();\r\n        }\r\n    }, [isPlaying]);\r\n\r\n    const togglePlayingList = () => {\r\n        setShowPlayingList(!showPlayingList);\r\n    }\r\n\r\n    const handlePlayPause = () => {\r\n        dispatch(togglePlayMusic());\r\n    }\r\n\r\n    const handleSkip = (pos: number) => {\r\n        dispatch(skipMusic(pos));\r\n    }\r\n\r\n    const handleRepeat = () => {\r\n        setIsRepeat(!isRepeat);\r\n    }\r\n\r\n    const handleShuffle = () => {\r\n        if (isShuffle) {\r\n            dispatch(shuffle(false));\r\n        } else {\r\n            dispatch(shuffle(true));\r\n        }\r\n\r\n        setShuffle(!isShuffle);\r\n    }\r\n\r\n    const handleSliderChange = ({x}: {x: number}) => {\r\n        audioRef.current.currentTime = x;\r\n        setCurrentTime(x);\r\n    }\r\n\r\n    const handleLoadedData = () => {\r\n        setDuration(audioRef.current.duration);\r\n\r\n        if (isPlaying) {\r\n            audioRef.current.play();\r\n        }\r\n    }\r\n\r\n    const handleTimeUpdate = () => {\r\n        setCurrentTime(audioRef.current.currentTime);\r\n    }\r\n\r\n    const handleEnd = () => {\r\n        dispatch(counter(songs[songIndex].music_id));\r\n        if (isRepeat || songIndex < songs.length - 1) {\r\n            dispatch(skipMusic(1));\r\n        } else dispatch(togglePlayMusic());\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <NowPlaying \r\n                songs={songs} \r\n                songIndex={songIndex} \r\n                isPlaying={isPlaying}\r\n                showPlayingList={showPlayingList}\r\n            /> */}\r\n            <div className='controller'>\r\n                <Row className='d-flex align-items-center justify-content-between h-100'>\r\n                    <Col lg={3} md={4} xs={6} className='d-flex align-items-center controller__info'>\r\n                        <img\r\n                            className='controller__info-img'\r\n                            src={songs[songIndex].image_url}\r\n                        />\r\n\r\n                        <div className='ml-3'>\r\n                            <h3 className='controller__info-title'>\r\n                                {songs[songIndex].title}\r\n                            </h3>\r\n                            <p className='controller__info-artist'>\r\n                                {songs[songIndex].artists}\r\n                            </p>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col lg={2} md={3} xs={6}>\r\n                        <ul className='d-flex align-items-center justify-content-end p-0 mb-0'>\r\n                            <li \r\n                                className='m-12 pointer'\r\n                                onClick={() => handleSkip(-1)}>\r\n                                <img\r\n                                    className='w-20 h-20'\r\n                                    src={PrevIcon}\r\n                                    alt='previous button'\r\n                                />\r\n                            </li>\r\n\r\n                            <li \r\n                                className='m-12 pointer'\r\n                                onClick={handlePlayPause}>\r\n                                <img\r\n                                    className='h-45 w-45'\r\n                                    src={isPlaying ? PauseIcon : PlayIcon}\r\n                                    alt={isPlaying ? 'play button' : 'pause button'} \r\n                                />\r\n                            </li>\r\n\r\n                            <li \r\n                                className='m-12 pointer'\r\n                                onClick={() => handleSkip(1)}>\r\n                                <img\r\n                                    className='w-20 h-20'\r\n                                    src={NextIcon}\r\n                                    alt='next button' \r\n                                />\r\n                            </li>\r\n\r\n                            <li>\r\n                                <ModeButton \r\n                                    mode='repeat'\r\n                                    isActive={isRepeat}\r\n                                    onClick={handleRepeat}\r\n                                />\r\n                            </li>\r\n\r\n                            <li>\r\n                                <ModeButton \r\n                                    mode='shuffle'\r\n                                    isActive={isShuffle}\r\n                                    onClick={handleShuffle}\r\n                                />\r\n                            </li>\r\n\r\n                            <li>\r\n                                <IconButton onClick={togglePlayingList}>\r\n                                    <img className='w-20 h-20' src={PlaylistIcon} />\r\n                                </IconButton>\r\n                            </li>\r\n                        </ul>\r\n                    </Col>\r\n\r\n                    <Col lg={5} md={5} className='controller__slider d-flex align-items-center'>\r\n                        <span className='controller__timer controller__timer-left'>\r\n                            {convertTime(currentTime)}\r\n                        </span>\r\n\r\n                        <Slider \r\n                            axis='x'\r\n                            xmax={duration}\r\n                            x={currentTime}\r\n                            onChange={handleSliderChange}\r\n                            styles={{\r\n                                track: {\r\n                                    backgroundColor: '#fff',\r\n                                    height: 5,\r\n                                    flex: 1,\r\n                                },\r\n                                active: {\r\n                                    backgroundColor: '#DC3A61'\r\n                                },\r\n                                thumb: {\r\n                                    width: 10,\r\n                                    height: 10,\r\n                                    backgroundColor: '#DC3A61'\r\n                                },\r\n                                disabled: {\r\n                                    opacity: 0.5\r\n                                }\r\n                            }}\r\n                        />\r\n\r\n                        <span className='controller__timer controller__timer-right'>\r\n                            {convertTime(duration)}\r\n                        </span>\r\n\r\n                        <audio \r\n                            ref={audioRef}\r\n                            src={songs[songIndex].url}\r\n                            onLoadedData={handleLoadedData}\r\n                            onTimeUpdate={handleTimeUpdate}\r\n                            onEnded={handleEnd}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Controller;\r\n","D:\\Project\\BTl-web\\src\\app\\data\\song.ts",[],["515","516"],"D:\\Project\\BTl-web\\src\\app\\components\\Common\\mode-button\\index.tsx",["517","518"],"import React from 'react';\r\nimport RepeatIcon from 'assets/images/repeat-default.svg';\r\nimport RepeatActiveIcon from 'assets/images/repeat.svg';\r\nimport ShuffleIcon from 'assets/images/shuffle-default.svg';\r\nimport ShuffleActiveIcon from 'assets/images/shuffle.svg';\r\n\r\ninterface Props {\r\n    mode: 'shuffle' | 'repeat',\r\n    onClick: () => void,\r\n    isActive: boolean,\r\n}\r\n\r\nconst ModeButton: React.FC<Props> = (props: Props) => {\r\n    const { mode, isActive, onClick } = props;\r\n\r\n    const renderShuffle = () => {\r\n        return (\r\n            <img className='h-20 w-20' src={isActive ? ShuffleActiveIcon : ShuffleIcon} />\r\n        )\r\n    }\r\n\r\n    const renderRepeat = () => {\r\n        return (\r\n            <img className='h-20 w-20' src={isActive ? RepeatActiveIcon : RepeatIcon} />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className='m-12 pointer'\r\n                onClick={onClick}>\r\n                {mode === 'shuffle' ? renderShuffle() : renderRepeat()}\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ModeButton;\r\n","D:\\Project\\BTl-web\\src\\app\\components\\Common\\icon-button\\index.tsx",[],"D:\\Project\\BTl-web\\src\\app\\redux\\modules\\player\\index.ts",[],"D:\\Project\\BTl-web\\src\\app\\redux\\modules\\player\\actions.ts",[],"D:\\Project\\BTl-web\\src\\app\\redux\\modules\\player\\reducer.ts",[],"D:\\Project\\BTl-web\\src\\app\\components\\Common\\nowplaying\\index.tsx",["519","520"],"D:\\Project\\BTl-web\\src\\app\\constants\\pagination.ts",[],"D:\\Project\\BTl-web\\src\\app\\api\\explore.ts",["521"],"D:\\Project\\BTl-web\\src\\app\\api\\index.ts",[],"D:\\Project\\BTl-web\\src\\app\\constants\\api.ts",[],"D:\\Project\\BTl-web\\src\\app\\components\\Common\\card1\\index.tsx",["522"],"import { Song } from 'app/models/Song';\r\nimport PauseIcon from 'assets/images/pause-icon.svg';\r\nimport PlayIcon from 'assets/images/play-icon.svg';\r\nimport React from 'react';\r\nimport './style.scss';\r\n\r\ninterface Props extends Song {\r\n    image_url: string,\r\n    title: string,\r\n    artists: string,\r\n    isPlaying?: boolean,\r\n    size?: string,\r\n    onClick: () => void,\r\n    theme?: 'dark',\r\n}\r\n\r\nconst Card1: React.FC<Props> = (props: Props) => {\r\n    const {\r\n        image_url,\r\n        title,\r\n        artists,\r\n        isPlaying,\r\n        size = 'small',\r\n        onClick,\r\n        theme,\r\n    } = props;\r\n\r\n    return (\r\n        <div className='song-card'>\r\n            <div className='song-card-top' onClick={onClick}>\r\n                <img className='song-img' src={image_url} alt=\"\" />\r\n                \r\n                <div className='layer'>\r\n                    <div className='button-container d-flex justify-content-center align-items-center'>\r\n                        <img className='control-btn' src={isPlaying ? PauseIcon : PlayIcon} />\r\n                        {/* <Row className='justify-content-center align-items-center' noGutters={true}>\r\n                            <Col xs='auto'>\r\n                                <img className='react' src={isLove ? HeartActive : HeartDefault} />\r\n                            </Col>\r\n\r\n                            <Col xs='auto'>\r\n                                \r\n                            </Col>\r\n\r\n                            <Col xs='auto'>\r\n                                <img className='more-btn' src={MoreIcon} />\r\n                            </Col>\r\n                        </Row> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='song-info' data-size={size}>\r\n                <div\r\n                    className={`song-name ${theme && 'txt-white'}`}\r\n                    data-size={size}>\r\n                    {title}\r\n                </div>\r\n\r\n                <div\r\n                    className='artist'\r\n                    data-size={size}>\r\n                    {artists}\r\n                </div>\r\n                {/* <Row className='align-items-center'>\r\n                    <Col>\r\n                        \r\n\r\n                        \r\n                    </Col>\r\n\r\n                    <Col className='song-react' data-size={size}>\r\n                        <img \r\n                            src={isLove ? HeartActive : HeartDefault} \r\n                        />\r\n                    </Col>\r\n                </Row> */}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Card1;\r\n","D:\\Project\\BTl-web\\src\\app\\components\\Common\\card2\\index.tsx",["523"],"D:\\Project\\BTl-web\\src\\app\\helpers\\player.ts",[],"D:\\Project\\BTl-web\\src\\app\\pages\\album-page\\index.tsx",["524","525","526"],"D:\\Project\\BTl-web\\src\\app\\pages\\home\\chart\\index.tsx",["527","528"],"// import TopList from './top-list';\r\n// import Avt from '../latest-song/images/market-image.png';\r\nimport CustomButton from 'app/components/Common/button';\r\nimport SongList from 'app/components/Common/song-list';\r\nimport { Song } from 'app/models/Song';\r\nimport ArrowDown from 'assets/images/arrow-down-white.svg';\r\nimport { useEffect, useState } from 'react';\r\nimport SwiperCore, { Pagination } from 'swiper';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport './style.scss';\r\n\r\nSwiperCore.use([Pagination]);\r\n\r\ninterface Props {\r\n    charts: Array<{\r\n\t\tarea: string,\r\n\t\ttitle: string,\r\n\t\tsongs: Array<Song>,\r\n\t}>\r\n}\r\n\r\nconst Chart: React.FC<Props> = (props: Props) => {\r\n    const { charts } = props;\r\n    const [fullChart, setFullChart] = useState<boolean>(false);\r\n    const [chart, setChart] = useState<Array<{\r\n\t\tarea: string,\r\n\t\ttitle: string,\r\n\t\tsongs: Array<Song>,\r\n    }>>([]);\r\n\r\n    useEffect(() => {\r\n        if (fullChart) {\r\n            setChart(charts);\r\n        } else {\r\n            let shortCharts = charts.map((chart) => {\r\n                return {\r\n                    ...chart,\r\n                    songs: chart.songs.slice(0, 3),\r\n                }\r\n            })\r\n            setChart(shortCharts);\r\n        }\r\n    }, [fullChart]);\r\n\r\n    const renderChartSlides = () => {\r\n        return chart.map(({area, title, songs}) => {\r\n            return (\r\n                <SwiperSlide key={area} className='chart-slide'>\r\n                    <div className='chart-block'>\r\n                        <h2 className='chart-title mb-20'>\r\n                            {title}\r\n                        </h2>\r\n\r\n                        <SongList\r\n                            songList={songs}\r\n                            isChart\r\n                        />\r\n                    </div>\r\n                </SwiperSlide>\r\n            )\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div className=\"chart-container\">\r\n            <h4 className=\"brand\">Ranking</h4>\r\n            <h3 className=\"title\">Watch the music chart</h3>\r\n\r\n            {chart.length ? (\r\n                <>\r\n                    <Swiper\r\n                        className='mb-20 chart-swiper'\r\n                        slidesPerView='auto'\r\n                        slideActiveClass='chart-slide--active'\r\n                        pagination={{\r\n                            el: \".chart-swiper-pagination\", // little dots under the slides for navigation\r\n                            clickable: true\r\n                        }}\r\n                    >   \r\n                        {renderChartSlides()}\r\n                    </Swiper>\r\n                </>\r\n            ) : null}\r\n            \r\n            <div className='chart-swiper-pagination' />\r\n\r\n            <div className='chart-button-container mbc-60px'>\r\n                <CustomButton\r\n                    size='large'\r\n                    color='red'\r\n                    shape='round'\r\n                    onClick={() => setFullChart(!fullChart)}\r\n                >\r\n                    <span className='mrc-12px'>See All</span>\r\n                    <img src={ArrowDown} />\r\n                </CustomButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;\r\n","D:\\Project\\BTl-web\\src\\app\\components\\Common\\song-list\\index.tsx",["529","530","531","532"],"D:\\Project\\BTl-web\\src\\app\\pages\\singer-detail\\index.tsx",["533","534","535","536","537","538"],"import { fetchArtistDetail } from 'app/api/explore';\r\nimport AlbumSlide from 'app/components/Common/album-slide';\r\nimport CustomButton from 'app/components/Common/button';\r\nimport SongSlide from 'app/components/Common/song-slide';\r\nimport { playSong } from 'app/helpers/player';\r\nimport { Album } from 'app/models/Album';\r\nimport { Singer } from 'app/models/Singer';\r\nimport { Song } from 'app/models/Song';\r\nimport PlayIcon from 'assets/images/play-no-circle.svg';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport './style.scss';\r\n\r\ninterface RouteParams {\r\n    id: string,\r\n}\r\n\r\nconst SingerDetail: React.FC = () => {\r\n    const params = useParams<RouteParams>();\r\n    let id = 1;\r\n    let name = 'Binz';\r\n    let image_url = 'https://photo-resize-zmp3.zadn.vn/w480_r1x1_jpeg/cover/4/b/b/a/4bbabb68a7e96f3c00a1740456c2df33.jpg';\r\n    \r\n\r\n    const [artistInfo, setArtistInfo] = useState<Singer>();\r\n    const [songList, setSongList] = useState<Array<Song>>([]);\r\n    const [albumList, setAlbumList] = useState<Array<Album>>([]);\r\n\r\n    useEffect(() => {\r\n        fetchArtistDetail(id)\r\n            .then((data) => {\r\n                console.log(data)\r\n                setSongList(data.artistSongs);\r\n                setAlbumList(data.artistAlbums);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"singer-detail-container\">\r\n                <div className=\"singer-info\">\r\n                    <div className=\"container h-100\">\r\n                        <img src={image_url} className=\"singer-avatar\" />\r\n\r\n                        <div className=\"d-flex align-items-end singer-control justify-content-between h-100\">\r\n                            <div className=\"singer-name\">\r\n                                {name}\r\n                            </div>\r\n\r\n                            <div>\r\n                                <CustomButton\r\n                                    onClick={() => playSong(songList)}\r\n                                    size='large'\r\n                                    color='black'\r\n                                    shape='circle'\r\n                                >\r\n                                    <img src={PlayIcon} className='mr-12'/>\r\n                                    <span>Play All Song</span>\r\n                                </CustomButton>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='singer-detail-section slide-container'>\r\n                    <SongSlide\r\n                        title='Tracks' \r\n                        songList={songList}\r\n                    />\r\n                </div>\r\n\r\n                <div className='slide-container'>\r\n                    <AlbumSlide \r\n                        title='Albums'\r\n                        albumList={albumList}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SingerDetail;\r\n","D:\\Project\\BTl-web\\src\\app\\components\\Common\\song-slide\\index.tsx",[],"D:\\Project\\BTl-web\\src\\app\\components\\Common\\album-slide\\index.tsx",["539"],"import './style.scss';\r\nimport PlaylistCard from 'app/components/Common/card2';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport SwiperCore, { Navigation } from 'swiper';\r\nimport PreviousButton from 'assets/images/arrow-left.svg';\r\nimport NextButton from 'assets/images/arrow-right.svg';\r\nimport { Album } from 'app/models/Album';\r\nimport { fetchSongsByAlbumId } from 'app/api/explore';\r\nimport { playSong } from 'app/helpers/player';\r\nimport { useHistory } from 'react-router';\r\nimport { RoutePaths } from 'app/constants';\r\n\r\nSwiperCore.use([Navigation]);\r\n\r\ninterface Props {\r\n    albumList: Array<Album>,\r\n    title: string,\r\n    colorBg?: boolean,\r\n}\r\n\r\nconst AlbumSlide: React.FC<Props> = (props: Props) => {\r\n    const { title, albumList, colorBg } = props;\r\n    const history = useHistory();\r\n     \r\n    const handlePlay = (album_id: number) => {\r\n        fetchSongsByAlbumId(album_id)\r\n            .then((data) => {\r\n                console.log(data);\r\n                playSong(data.songs);\r\n            })\r\n    }\r\n\r\n    const handleNavigate = (album_id: number) => {\r\n        history.push(`${RoutePaths.Album.Index}/${album_id}`);\r\n    }\r\n\r\n    const albumSlide = albumList.map((album) => {\r\n        return (\r\n            <SwiperSlide key={album.album_id} className=\"album-slide__playlist\">\r\n                <PlaylistCard \r\n                    {...album}\r\n                    handlePlay={() => handlePlay(album.album_id)}\r\n                    handleNavigate={() => handleNavigate(album.album_id)} \r\n                />\r\n            </SwiperSlide>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <section className='album-slide slide'>\r\n            <div className=\"slide-header\">\r\n                <div className=\"d-flex align-items-end\">\r\n                    <h3 className='section-title'>\r\n                        {title}\r\n                    </h3>\r\n                </div>\r\n\r\n                <div>\r\n                    <img\r\n                        className=\"album-slide__swiper-prev\"\r\n                        src={PreviousButton}\r\n                        alt=\"Previous slide\"\r\n                    />\r\n                    <img className=\"album-slide__swiper-next\" src={NextButton} alt=\"Next slide\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"album-slide__content\">\r\n                {albumList.length ? (\r\n                    <Swiper\r\n                        slidesPerView=\"auto\"\r\n                        navigation={{\r\n                            nextEl: \".album-slide__swiper-next\",\r\n                            prevEl: \".album-slide__swiper-prev\",\r\n                            disabledClass: \"album-slide__swiper-button--disabled\",\r\n                        }}\r\n                    >\r\n                        {albumSlide}\r\n                    </Swiper>\r\n                ) : null}\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default AlbumSlide;\r\n","D:\\Project\\BTl-web\\src\\app\\components\\Common\\not-found-item\\index.tsx",[],"D:\\Project\\BTl-web\\src\\app\\pages\\search\\index.tsx",["540"],"import { fetchSearchResult } from 'app/api/explore';\r\nimport { Album } from 'app/models/Album';\r\nimport { Singer } from 'app/models/Singer';\r\nimport { Song } from 'app/models/Song';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Nav, Row, Tab, Col, Badge } from 'react-bootstrap';\r\nimport { useParams } from 'react-router';\r\nimport './style.scss';\r\nimport NotFoundSong from 'assets/images/not-found-song.svg';\r\nimport NotFoundItem from 'app/components/Common/not-found-item';\r\nimport SingerSlide from './component/singer-slide';\r\nimport SongSlide from 'app/components/Common/song-slide';\r\nimport AlbumSlide from 'app/components/Common/album-slide';\r\nimport SearchTabContent from './component/search-tab-content';\r\nimport SingerList from './component/singer-list';\r\nimport SongList from './component/song-list';\r\nimport AlbumList from './component/album-list';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { disableLoading, enableLoading } from 'app/redux/modules/loading';\r\nimport { RootState } from 'app/redux';\r\nimport LoadingOverlay from 'app/components/LoadingOverlay';\r\n\r\nconst eventKey = {\r\n    All: 0,\r\n    Singer: 1,\r\n    Song: 2,\r\n    Album: 3,\r\n};\r\n\r\ninterface RouteParams {\r\n    keyword: string,\r\n}\r\n\r\nconst SearchPage: React.FC = () => {\r\n    const params = useParams<RouteParams>();\r\n    let { keyword } = params;\r\n\r\n    const dispatch = useDispatch();\r\n    const { isLoading } = useSelector((state: RootState) => state.loading);\r\n\r\n    const [resultSong, setResultSong] = useState<Array<Song>>([]);\r\n    const [topSong, setTopSong] = useState<Array<Song>>([]);\r\n\r\n    const [resultAlbum, setResultAlbum] = useState<Array<Album>>([]);\r\n    const [topAlbum, setTopAlbum] = useState<Array<Album>>([]);\r\n\r\n    const [resultArtist, setResultArtist] = useState<Array<Singer>>([]);\r\n    const [topArtist, setTopArtist] = useState<Array<Singer>>([]);\r\n    const [tab, setTab] = useState<Array<{\r\n        title: string,\r\n        eventKey: number,\r\n        total: number,\r\n    }>>([]);\r\n\r\n    useEffect(() => {\r\n        dispatch(enableLoading());\r\n\r\n        fetchSearchResult(keyword)\r\n            .then((data) => {\r\n                let menu = [];\r\n                if (data) {\r\n                    const {artists, songs, albums} = data;\r\n                    setResultArtist(artists);\r\n                    setResultSong(songs);\r\n                    setResultAlbum(albums);\r\n                    let artistLength = artists.length;\r\n                    let songLength = songs.length;\r\n                    let albumLength = albums.length;\r\n\r\n                    if (artistLength || songLength || albumLength) {\r\n                        menu.push({\r\n                            title: 'All',\r\n                            eventKey: eventKey.All,\r\n                            total: artistLength + songLength + albumLength,\r\n                        });\r\n\r\n                        if (artists.length) {\r\n                            setTopArtist(artists.slice(0, 4));\r\n\r\n                            menu.push({\r\n                                title: 'Singer',\r\n                                eventKey: eventKey.Singer,\r\n                                total: artistLength,\r\n                            });\r\n                        }\r\n\r\n                        if (songs.length) {\r\n                            setTopSong(songs.slice(0, 6));\r\n\r\n                            menu.push({\r\n                                title: 'Song',\r\n                                eventKey: eventKey.Song,\r\n                                total: songLength,\r\n                            });\r\n                        }\r\n\r\n                        if (albums.length) {\r\n                            setTopAlbum(albums.slice(0, 6));\r\n\r\n                            menu.push({\r\n                                title: 'Album',\r\n                                eventKey: eventKey.Album,\r\n                                total: albumLength,\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    setTab(menu);\r\n\r\n                    if (!artists.length) {\r\n                        setTopArtist([]);\r\n                    }\r\n\r\n                    if (!songs.length) {\r\n                        setTopSong([]);\r\n                    }\r\n\r\n                    if (!albums.length) {\r\n                        setTopAlbum([]);\r\n                    }\r\n                }\r\n                dispatch(disableLoading());\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                dispatch(disableLoading());\r\n            });\r\n    }, []);\r\n\r\n\r\n    const renderTab = () => {\r\n        return tab.map(({title, eventKey, total}, index) => {\r\n            return (\r\n                <Nav.Item className=\"search-nav-item\" key={index}>\r\n                    <Nav.Link \r\n                        eventKey={eventKey} \r\n                        className='d-flex justify-content-between search-nav-link'>\r\n                        <span>\r\n                            {title}\r\n                        </span>\r\n                        <Badge \r\n                            as='div'\r\n                            className='d-flex justify-content-center align-items-center search-nav-badge'>\r\n                            {total}\r\n                        </Badge>\r\n                    </Nav.Link>\r\n                </Nav.Item>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"search-container custom-container h-100\">\r\n                <h1 className=\"page-title\">\r\n                    Search result\r\n                </h1>\r\n\r\n                {isLoading ? <LoadingOverlay /> : (\r\n                    <>\r\n                        {tab.length ? (\r\n                            <Tab.Container defaultActiveKey={eventKey.All}>\r\n                                <Row>\r\n                                    <Col md={3} sm={4}>\r\n                                        <Nav className=\"flex-column search-left-tab\">\r\n                                            {renderTab()}\r\n                                        </Nav>\r\n                                    </Col>\r\n\r\n                                    <Col md={9} sm={8}>\r\n                                        <Tab.Content>\r\n                                            <Tab.Pane eventKey={eventKey.All}>\r\n                                                <div className='tab-all'>\r\n                                                    {resultArtist.length ? <SingerSlide singerList={topArtist}/> : null}\r\n                                                    \r\n                                                    {resultSong.length ? (\r\n                                                        <SongSlide\r\n                                                            title='Song'\r\n                                                            songList={topSong}/>\r\n                                                    ) : null}\r\n                                                    \r\n                                                    {resultAlbum.length ? (\r\n                                                        <AlbumSlide \r\n                                                            title='Album'\r\n                                                            albumList={topAlbum}/>\r\n                                                    ) : null}\r\n                                                    \r\n                                                </div>\r\n                                            </Tab.Pane>\r\n\r\n                                            <Tab.Pane eventKey={eventKey.Singer}>\r\n                                                <SearchTabContent title='Singer'>\r\n                                                    <SingerList singerList={resultArtist}/>\r\n                                                </SearchTabContent>\r\n                                            </Tab.Pane>\r\n\r\n                                            <Tab.Pane eventKey={eventKey.Song}>\r\n                                                <SearchTabContent title='Song'>\r\n                                                    <SongList songList={resultSong}/>\r\n                                                </SearchTabContent>\r\n                                            </Tab.Pane>\r\n\r\n                                            <Tab.Pane eventKey={eventKey.Album}>\r\n                                                <SearchTabContent title='Album'>\r\n                                                    <AlbumList albumList={resultAlbum}/>\r\n                                                </SearchTabContent>\r\n                                            </Tab.Pane>\r\n                                        </Tab.Content>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Tab.Container>\r\n                            ) : (\r\n                                <NotFoundItem text=\"Can't found any song, albums, singerss\">\r\n                                    <img src={NotFoundSong} alt='not found sond' />\r\n                                </NotFoundItem>\r\n                            )\r\n                        }\r\n                    </>\r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n} \r\n\r\nexport default SearchPage;","D:\\Project\\BTl-web\\src\\app\\components\\Common\\card-singer\\index.tsx",["541"],"import { RoutePaths } from 'app/constants';\r\nimport PlayIcon from 'assets/images/play-icon.svg';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport './style.scss';\r\n\r\ninterface Props {\r\n    artist_id: string,\r\n    name: string,\r\n    image_url: string,\r\n    size: 'small' | 'medium',\r\n}\r\n\r\nconst CardSinger: React.FC<Props> = (props: Props) => {\r\n    const {\r\n        image_url,\r\n        artist_id,\r\n        name,\r\n        size,\r\n    } = props;\r\n\r\n    const history = useHistory();\r\n\r\n    const handleNavigate = () => {\r\n        history.push(`${RoutePaths.Singer.Index}/${artist_id}`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"singer-card\">\r\n                <div className='singer-card__cover pointer' data-size={size} onClick={handleNavigate}>\r\n                    <img\r\n                        className='singer-img'\r\n                        src={image_url}\r\n                        alt=''\r\n                    />\r\n                </div>\r\n\r\n                <div className='singer-card__meta pointer' data-size={size}>\r\n                    <div\r\n                        className='singer-name'\r\n                        data-size={size}>\r\n                        {name}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CardSinger;\r\n","D:\\Project\\BTl-web\\src\\app\\pages\\search\\component\\singer-list\\index.tsx",[],"D:\\Project\\BTl-web\\src\\app\\pages\\search\\component\\search-tab-content\\index.tsx",[],"D:\\Project\\BTl-web\\src\\app\\pages\\search\\component\\song-list\\index.tsx",["542"],"import CardSinger from 'app/components/Common/card-singer';\r\nimport Card1 from 'app/components/Common/card1';\r\nimport { playSong } from 'app/helpers/player';\r\nimport { Song } from 'app/models/Song';\r\nimport React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\ninterface Props {\r\n    songList: Array<Song>\r\n}\r\n\r\nconst SongList: React.FC<Props> = (props: Props) => {\r\n    const { songList } = props;\r\n\r\n    const renderSongList = () => {\r\n        return songList.map((song: Song) => {\r\n            return (\r\n                <Col md={3} sm={4} xs={6} key={song.music_id}>\r\n                    <Card1 \r\n                        {...song}\r\n                        size='medium'\r\n                        onClick={() => playSong([song])} \r\n                    />\r\n                </Col>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            {renderSongList()}\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SongList;\r\n","D:\\Project\\BTl-web\\src\\app\\pages\\search\\component\\singer-slide\\index.tsx",["543"],"import React from 'react';\r\nimport './style.scss';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport SwiperCore, { Navigation } from 'swiper';\r\nimport PreviousButton from 'assets/images/arrow-left.svg';\r\nimport NextButton from 'assets/images/arrow-right.svg';\r\nimport { playSong } from 'app/helpers/player';\r\nimport { Singer } from 'app/models/Singer';\r\nimport CardSinger from 'app/components/Common/card-singer';\r\n\r\nSwiperCore.use([Navigation]);\r\n\r\ninterface Props {\r\n    singerList: Array<Singer>,\r\n}\r\n\r\nconst SingerSlide: React.FC<Props> = (props: Props) => {\r\n    const { singerList } = props;\r\n\r\n    const singerSlide = singerList.map((singer: Singer) => {\r\n        return (\r\n            <SwiperSlide key={singer.artist_id} className=\"singer-slide__post\" >\r\n                <CardSinger\r\n                    {...singer}\r\n                    size='small'\r\n                />\r\n            </SwiperSlide>\r\n        );\r\n    });\r\n    \r\n    return (\r\n        <section className='singer-slide slide'>\r\n            <div className=\"slide-header\">\r\n                <h3 className='section-title'>\r\n                    Singer\r\n                </h3>\r\n\r\n                <div>\r\n                    <img\r\n                        className=\"singer-slide__swiper-prev\"\r\n                        src={PreviousButton}\r\n                        alt=\"Previous slide\"\r\n                    />\r\n\r\n                    <img className=\"singer-slide__swiper-next\" src={NextButton} alt=\"Next slide\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"singer-slide__content\">\r\n                {singerList.length ? (\r\n                    <Swiper\r\n                        slidesPerView=\"auto\"\r\n                        navigation={{\r\n                            nextEl: \".singer-slide__swiper-next\",\r\n                            prevEl: \".singer-slide__swiper-prev\",\r\n                            disabledClass: \"singer-slide__swiper-button--disabled\",\r\n                        }}\r\n                    >\r\n                        {singerSlide}\r\n                    </Swiper>\r\n                ) : null}\r\n                \r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default SingerSlide;\r\n","D:\\Project\\BTl-web\\src\\app\\pages\\search\\component\\album-list\\index.tsx",[],"D:\\Project\\BTl-web\\src\\app\\components\\Common\\sidebar\\index.tsx",["544","545","546"],"import { RoutePaths } from 'app/constants';\r\nimport React from 'react';\r\nimport { NavbarBrand } from 'react-bootstrap';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './style.scss';\r\nimport Logo from 'assets/images/logo.png';\r\n\r\ninterface Props {\r\n    isVisible: boolean,\r\n}\r\n\r\nconst SideBar: React.FC<Props> = (props: Props) => {\r\n    const { isVisible } = props;\r\n\r\n    return (\r\n        <div className={`sidebar ${isVisible && 'show'}`}>\r\n            <Nav className='w-100 flex-column sidebar-container'>\r\n                <NavLink \r\n                    to={RoutePaths.Home.Index}\r\n                    className='app-logo' \r\n                    activeClassName='sidebar-item--active'\r\n                >\r\n                    <img className='logo-img' src={Logo} />\r\n                </NavLink>\r\n\r\n                <NavLink \r\n                    to={RoutePaths.Home.Index}\r\n                    className='sidebar-item' \r\n                    activeClassName='sidebar-item--active'\r\n                >\r\n                    Discovery\r\n                </NavLink>\r\n\r\n                <NavLink \r\n                    to={RoutePaths.NotFound}\r\n                    className='sidebar-item'\r\n                    activeClassName='sidebar-item--active'\r\n                >\r\n                    Music Chart\r\n                </NavLink>\r\n\r\n                <NavLink \r\n                    to={RoutePaths.NotFound}\r\n                    className='sidebar-item'\r\n                    activeClassName='sidebar-item--active'\r\n                >\r\n                    New Release\r\n                </NavLink>\r\n\r\n                <NavLink \r\n                    to={RoutePaths.NotFound}\r\n                    className='sidebar-item'\r\n                    activeClassName='sidebar-item--active'\r\n                >\r\n                    Singer\r\n                </NavLink>\r\n\r\n                <NavLink \r\n                    to={RoutePaths.NotFound}\r\n                    className='sidebar-item'\r\n                    activeClassName='sidebar-item--active'\r\n                >\r\n                    Genre\r\n                </NavLink>\r\n            </Nav>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideBar;\r\n","D:\\Project\\BTl-web\\src\\app\\components\\LoadingOverlay.tsx",[],"D:\\Project\\BTl-web\\src\\app\\pages\\genre-detail\\index.tsx",["547","548"],"D:\\Project\\BTl-web\\src\\app\\pages\\genre-list\\index.tsx",["549","550"],"D:\\Project\\music-web-btl\\music-web-fe\\src\\index.tsx",[],["551","552"],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\App.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\SplashScreen.tsx",["553"],"import { FunctionComponent, useEffect } from \"react\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { disableLoading, enableLoading } from \"../redux/modules/loading\";\r\n\r\ninterface Props {\r\n\tenableLoading: (opacity?: number) => void;\r\n\tdisableLoading: () => void;\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n\tenableLoading,\r\n\tdisableLoading,\r\n};\r\n\r\nconst BaseSplashScreen: FunctionComponent<Props> = ({\r\n\tenableLoading,\r\n\tdisableLoading,\r\n}) => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(enableLoading())\r\n\r\n\t\treturn () => {\r\n\t\t\tdispatch(disableLoading())\r\n\t\t};\r\n\t}, []);\r\n\treturn null;\r\n};\r\n\r\nexport const SplashScreen = connect(null, mapDispatchToProps)(BaseSplashScreen);\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\index.ts",["554"],"import configureStore from \"./configureStore\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { rootReducer } from './modules/root';\r\nimport thunk from 'redux-thunk';\r\n\r\n// const { store, persistor } = configureStore();\r\n\r\n// export { persistor };\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default store;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\routes\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\root.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\loading\\index.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\constants\\index.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\loading\\reducer.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\loading\\actions.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\layouts\\MainLayout.tsx",["555","556"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport Header from \"app/components/Common/header\";\r\nimport Controller from \"app/components/Common/controller\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"app/redux\";\r\nimport SideBar from \"app/components/Common/sidebar\";\r\nimport Loading from \"app/components/Common/loading\";\r\nimport ScrollToTop from \"app/components/ScrollToTop\";\r\nimport useClickOutside from \"app/hooks/useClickOutside\";\r\nimport { useLocation } from \"react-router\";\r\n\r\nexport const MainLayout: React.FC = ({ children }) => {\r\n\tconst { songs } = useSelector((state: RootState) => state.player);\r\n\tconst [visibleSidebar, setVisibleSideBar] = useState<boolean>(false);\r\n\tlet sidebarRef = useRef<any>();\r\n\tconst { pathname } = useLocation();\r\n\r\n\tuseEffect(() => {\r\n\t\tif (visibleSidebar) {\r\n\t\t\tsetVisibleSideBar(false);\r\n\t\t}\r\n\t}, [pathname]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ScrollToTop>\r\n\t\t\t\t<SideBar isVisible={visibleSidebar} myRef={el => sidebarRef.current = el}/>\r\n\t\t\t\t<Header \r\n\t\t\t\t\tshowSidebar={visibleSidebar}\r\n\t\t\t\t\ttoggleSidebar={() => setVisibleSideBar(!visibleSidebar)}/>\r\n\t\t\t\t<div className={`body ${songs.length && 'expand'} ${visibleSidebar && 'show-sidebar'}`}>\r\n\t\t\t\t\t<Loading />\r\n\t\t\t\t\t{children}\r\n\t\t\t\t</div>\r\n\t\t\t\t{songs.length ? <Controller /> : null}\r\n\t\t\t</ScrollToTop>\r\n\t\t\t\r\n\t\t</>\r\n\t);\r\n};\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\player\\index.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\singer-list\\index.tsx",["557","558"],"import { fetchSingers } from 'app/api/explore';\r\nimport CardSinger from 'app/components/Common/card-singer';\r\nimport Loading from 'app/components/Common/loading';\r\nimport ScrollToTopButton from 'app/components/Common/scroll-to-top-button';\r\nimport { DEFAULT_PAGE_SIZE } from 'app/constants/pagination';\r\nimport { Singer } from 'app/models/Singer';\r\nimport { disableLoading, enableLoading } from 'app/redux/modules/loading';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport './style.scss';\r\n\r\nconst SingerList: React.FC = () => {\r\n    const [singerList, setSingerList] = useState<Array<Singer>>([]);\r\n    const [loadMore, setLoadMore] = useState<boolean>(false);\r\n    const dispatch = useDispatch();\r\n    const [hasMore, setHasMore] = useState<boolean>(true);\r\n\r\n    const fetchData = useCallback(() => {\r\n        fetchSingers(DEFAULT_PAGE_SIZE - 1, singerList.length)\r\n            .then((data) => {\r\n                console.log(data)\r\n                if (data.singers.length) {\r\n                    setSingerList([...singerList, ...data.singers]);\r\n                    return;\r\n                }\r\n                setHasMore(false);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                setHasMore(false);\r\n            })\r\n    }, [singerList]);\r\n\r\n    const observer = useRef<IntersectionObserver>();\r\n    const lastElementRef = useCallback(node => {\r\n        if (loadMore) return;\r\n        if (observer.current) observer.current.disconnect();\r\n        observer.current = new IntersectionObserver(entries => {\r\n            if (entries[0].isIntersecting && hasMore) {\r\n                setLoadMore(true);\r\n                fetchData();\r\n                setLoadMore(false)\r\n            }\r\n        })\r\n\r\n        if (node) observer.current.observe(node);\r\n    }, [singerList, hasMore]);\r\n\r\n    useEffect(() => {\r\n        dispatch(enableLoading());\r\n        fetchData();\r\n        dispatch(disableLoading());\r\n    }, []);\r\n\r\n    const renderSingerList = () => {\r\n        let total = singerList.length;\r\n\r\n        return singerList.map((singer: Singer, index: number) => {\r\n            if (index === total - 1) {\r\n                return (\r\n                    <Col lg={2} md={3} sm={4} xs={6} key={index} ref={lastElementRef}>\r\n                        <CardSinger \r\n                            {...singer}\r\n                            size='medium'\r\n                        />\r\n                    </Col>\r\n                )\r\n            }\r\n\r\n            return (\r\n                <Col lg={2} md={3} sm={4} xs={6} key={index}>\r\n                    <CardSinger \r\n                        {...singer}\r\n                        size='medium'\r\n                    />\r\n                </Col>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"singer-container custom-container h-100\">\r\n            <h1 className=\"page-title\">\r\n                Singer\r\n            </h1>\r\n\r\n            <Loading />\r\n            <Row>\r\n                {renderSingerList()}\r\n            </Row>\r\n\r\n            <ScrollToTopButton />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingerList;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\home\\index.tsx",["559","560","561","562","563","564"],"import { fetchExplore } from 'app/api/explore';\r\nimport AlbumSlide from 'app/components/Common/album-slide';\r\nimport FacebookButton from 'app/components/Common/facebook-button';\r\nimport SongSlide from 'app/components/Common/song-slide';\r\nimport { Album } from 'app/models/Album';\r\nimport { Genre } from 'app/models/Genre';\r\nimport { Song } from 'app/models/Song';\r\nimport { RootState } from 'app/redux';\r\nimport { fetchUser } from 'app/redux/modules/auth';\r\nimport { disableLoading, enableLoading } from 'app/redux/modules/loading';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Banner from './banner';\r\nimport Chart from './chart';\r\nimport GenreList from './genre';\r\nimport './style.scss';\r\n\r\nconst randomNumber = (max: number) => {\r\n\treturn Math.floor(Math.random() * max);\r\n}\r\n\r\nconst backgoundColors = [\r\n    '#DC3A61',\r\n    '#FFB800',\r\n    '#638DFC',\r\n    '#000'\r\n]\r\n\r\nconst getRandomBadgeBackground = () => {\r\n    return backgoundColors[Math.floor(Math.random() * backgoundColors.length)]\r\n}\r\n\r\nconst Home: React.FC = () => {\r\n\tconst dispatch = useDispatch();\r\n    const { isLoading } = useSelector((state: RootState) => state.loading);\r\n    const { access_token, name, image } = useSelector((state: RootState) => state.auth);\r\n\tconst [latestSongs, setLatestSongs] = useState<Array<Song>>([]);\r\n\tconst [latestAlbums, setLatestAlbums] = useState<Array<Album>>([]);\r\n\tconst [genres, setGenres] = useState<Array<Genre>>([]);\r\n\tconst [charts, setCharts] = useState<Array<{\r\n\t\tarea: string,\r\n\t\ttitle: string,\r\n\t\tsongs: Array<Song>\r\n\t}>>([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(enableLoading());\r\n\t\tlet token = localStorage.getItem('access_token');\r\n\t\t\r\n\t\tif (token) {\r\n\t\t\tdispatch(fetchUser(token));\r\n\t\t}\r\n\r\n\t\tfetchExplore()\r\n\t\t  .then((data) => {\r\n\t\t\tsetLatestSongs(data.latestSongs);\r\n\t\t\tsetLatestAlbums(data.latestAlbums);\r\n\t\t\tsetGenres(data.genres);\r\n\r\n\t\t\tlet chart: Array<{\r\n\t\t\t\tarea: string,\r\n\t\t\t\ttitle: string,\r\n\t\t\t\tsongs: Array<Song>\r\n\t\t\t}> = [];\r\n\r\n\t\t\tlet vpop = data.vpop.map((song: Song) => ({\r\n\t\t\t\t...song,\r\n\t\t\t\tcolor: getRandomBadgeBackground(),\r\n\r\n\t\t\t}));\r\n\r\n\t\t\tlet kpop = data.kpop.map((song: Song) => ({\r\n\t\t\t\t...song,\r\n\t\t\t\tcolor: getRandomBadgeBackground(),\r\n\r\n\t\t\t}));\r\n\r\n\t\t\tlet usuk = data.usuk.map((song: Song) => ({\r\n\t\t\t\t...song,\r\n\t\t\t\tcolor: getRandomBadgeBackground(),\r\n\r\n\t\t\t}));\r\n\r\n\t\t\tchart.push({\r\n\t\t\t\tarea: 'VPOP',\r\n\t\t\t\ttitle: 'V-POP',\r\n\t\t\t\tsongs: vpop,\r\n\t\t\t});\r\n\r\n\t\t\tchart.push({\r\n\t\t\t\tarea: 'USUK',\r\n\t\t\t\ttitle: 'US-UK',\r\n\t\t\t\tsongs: usuk,\r\n\t\t\t});\r\n\r\n\t\t\tchart.push({\r\n\t\t\t\tarea: 'KPOP',\r\n\t\t\t\ttitle: 'K-POP',\r\n\t\t\t\tsongs: kpop,\r\n\t\t\t});\r\n\r\n\t\t\tsetCharts(chart);\r\n\t\t\tdispatch(disableLoading());\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tdispatch(disableLoading());\r\n\t\t});\r\n\t  }, []);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"homepage-container h-100\">\r\n\t\t\t\t{!isLoading ? (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Banner />\r\n\t\t\t\t\t\t<div className=' latest-song slide-container bg-slide'>\r\n\t\t\t\t\t\t\t<SongSlide \r\n\t\t\t\t\t\t\t\ttitle='Latest Song 🔥'\r\n\t\t\t\t\t\t\t\tsongList={latestSongs}\r\n\t\t\t\t\t\t\t\tisPlayAll\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div className='slide-container bg-slide'>\r\n\t\t\t\t\t\t\t<AlbumSlide \r\n\t\t\t\t\t\t\t\ttitle='Latest Album ⚡'\r\n\t\t\t\t\t\t\t\talbumList={latestAlbums}\r\n\t\t\t\t\t\t\t\tcolorBg\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='slide-container bg-slide'>\r\n\t\t\t\t\t\t\t<GenreList genreList={genres}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<Chart charts={charts}/>\r\n\t\t\t\t\t</>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Home;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\album-detail\\index.tsx",["565","566","567"],"import { fetchAlbumDetail } from 'app/api/explore';\r\nimport CustomButton from 'app/components/Common/button';\r\nimport SongList from 'app/components/Common/song-list';\r\nimport Loading from 'app/components/Common/loading';\r\nimport { RoutePaths } from 'app/constants';\r\nimport { playSong } from 'app/helpers/player';\r\nimport { Song } from 'app/models/Song';\r\nimport { RootState } from 'app/redux';\r\nimport { disableLoading, enableLoading } from 'app/redux/modules/loading';\r\nimport PlayIcon from 'assets/images/play-no-circle.svg';\r\nimport PauseIcon from 'assets/images/pause-no-circle.svg';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './style.scss';\r\nimport { togglePlayMusic } from 'app/redux/modules/player';\r\n\r\ninterface RouteParams {\r\n    id: string,\r\n    title: string,\r\n}\r\n\r\nconst AlbumDetail: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const { isLoading } = useSelector((state: RootState) => state.loading);\r\n    const { isPlaying } = useSelector((state: RootState) => state.player);\r\n    const params = useParams<RouteParams>();\r\n    let { id, title } = params;\r\n    let [image, setImage] = useState<string>();\r\n    let [singers, setSingers] = useState<string>();\r\n    let [songList, setSongList] = useState<Array<Song>>([]);\r\n    const [isPlayAlbum, setPlayAlbum] = useState<boolean>(false);\r\n    \r\n    useEffect(() => {\r\n        dispatch(enableLoading());\r\n\r\n        fetchAlbumDetail(parseInt(id))\r\n            .then((data) => {\r\n                setImage(data.album.image);\r\n                setSingers(data.album.singers);\r\n                setSongList(data.songs);\r\n                dispatch(disableLoading());\r\n                console.log(data)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                dispatch(disableLoading());\r\n            })\r\n            \r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isPlayAlbum && !isPlaying) {\r\n            setPlayAlbum(false)\r\n        }\r\n    }, [isPlaying])\r\n\r\n    const renderSingers = () => {\r\n        let singerArr = singers?.split(', ');\r\n        \r\n        return singerArr?.map((singer, index) => {\r\n            let subArr = singer.split('  ');\r\n            return (\r\n                <NavLink \r\n                    key={subArr[0]}\r\n                    className='artist-name'\r\n                    to={`${RoutePaths.Singer.Index}/${subArr[0]}/${subArr[1]}`}\r\n                >\r\n                    {subArr[1]}\r\n                </NavLink>\r\n            )\r\n        })\r\n    }\r\n\r\n    const handlePlayAlbum = () => {\r\n        if (isPlayAlbum) {\r\n            dispatch(togglePlayMusic());\r\n        } else {\r\n            playSong(songList);\r\n        }\r\n\r\n        setPlayAlbum(!isPlayAlbum);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"album-container custom-container h-100\">\r\n                <Loading />\r\n\r\n                {!isLoading ? (\r\n                    <>\r\n                        <h1 className=\"page-title\">\r\n                            {title}\r\n                        </h1>\r\n\r\n                        <Row>\r\n                            <Col lg={4} md={4} className='d-flex flex-column align-items-center'>\r\n                                <div className='album-img-container'>\r\n                                    <img className={`album-image ${isPlayAlbum && 'playing playing-slow'}`} src={image} alt='album cover'/>\r\n                                </div>\r\n                                \r\n                                <div className='w-fit'>\r\n                                    <CustomButton\r\n                                        onClick={handlePlayAlbum}\r\n                                        size='large'\r\n                                        color='red'\r\n                                        shape='circle'\r\n                                        classNames={['mt-32']}\r\n                                    >\r\n                                        <img src={isPlayAlbum ? PauseIcon : PlayIcon} className='mr-12' alt='play, pause'/>\r\n                                        <span>\r\n                                            {isPlayAlbum ? 'Pause' : 'Play All Song'}\r\n                                        </span>\r\n                                    </CustomButton>\r\n                                </div>\r\n                                \r\n                            </Col>\r\n\r\n                            <Col>\r\n                                <div className='album-songs'>\r\n                                    <SongList songList={songList}/>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </>\r\n                ) : null}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AlbumDetail;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\genre-list\\index.tsx",["568","569","570","571","572","573"],"import { fetchGenres } from 'app/api/explore';\r\nimport { DEFAULT_PAGE_SIZE } from 'app/constants/pagination';\r\nimport { Genre } from 'app/models/Genre';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport Card2 from 'app/components/Common/card2';\r\nimport { RoutePaths } from 'app/constants';\r\nimport { useHistory } from 'react-router';\r\nimport './style.scss';\r\nimport { useDispatch } from 'react-redux';\r\nimport { disableLoading, enableLoading } from 'app/redux/modules/loading';\r\n\r\nconst GenreList: React.FC = () => {\r\n    const [genreList, setGenreList] = useState<Array<Genre>>([]);\r\n    const [currentPage, setCurrentPage] = useState<number>(0);\r\n    const [loadMore, setLoadMore] = useState<boolean>(true);\r\n    const history = useHistory();\r\n    const listRef = useRef();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(enableLoading());\r\n        fetchData();\r\n        dispatch(disableLoading());\r\n        // setLoadMore(false);\r\n    }, []);\r\n\r\n    const fetchData = () => {\r\n        fetchGenres()\r\n            .then((data) => {\r\n                // setCurrentPage(currentPage + 1);\r\n                setGenreList([...genreList, ...data.genres]);\r\n                // console.log(data)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    const handleGenreDetail = (genre: Genre) => {\r\n        history.push(`${RoutePaths.Genre.Index}/${genre.genre_id}/${genre.name}`);\r\n    }\r\n\r\n    const renderGenreList = () => {\r\n        return genreList.map((genre: Genre) => {\r\n            return (\r\n                <Col md={3} sm={4} xs={6} key={genre.genre_id}>\r\n                    <Card2 \r\n                        {...genre}\r\n                        size='medium'\r\n                        handleNavigate={() => handleGenreDetail(genre)}\r\n                        isGenre={true}\r\n                    />\r\n                </Col>\r\n            )\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div className=\"genre-container custom-container h-100\">\r\n            <h1 className=\"page-title\">\r\n                Genre\r\n            </h1>\r\n\r\n            <Row ref={listRef.current}>\r\n                {renderGenreList()}\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GenreList;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\genre-detail\\index.tsx",["574","575","576","577"],"import { fetchAblumByGenre, fetchGenreDetail, fetchSongByGenre, fetchSongsByAlbumId } from 'app/api/explore';\r\nimport Card1 from 'app/components/Common/card1';\r\nimport Card2 from 'app/components/Common/card2';\r\nimport ScrollToTopButton from 'app/components/Common/scroll-to-top-button';\r\nimport { RoutePaths } from 'app/constants';\r\nimport { DEFAULT_PAGE_SIZE } from 'app/constants/pagination';\r\nimport { playSong } from 'app/helpers/player';\r\nimport { Album } from 'app/models/Album';\r\nimport { Song } from 'app/models/Song';\r\nimport { RootState } from 'app/redux';\r\nimport { disableLoading, enableLoading } from 'app/redux/modules/loading';\r\nimport $ from 'jquery';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport './style.scss';\r\n\r\nconst SEE_MORE = {\r\n    SONG: 0,\r\n    ALBUM: 1,\r\n}\r\n\r\ninterface RouteParams {\r\n    id: string,\r\n    title: string,\r\n}\r\n\r\nconst GenreDetail: React.FC = () => {\r\n    const { isPlaying, songs, songIndex } = useSelector((state: RootState) => state.player);\r\n    const params = useParams<RouteParams>();\r\n    let { id, title } = params;\r\n    const [songList, setSongList] = useState<Array<Song>>([]);\r\n    const [albumList, setAlbumList] = useState<Array<Album>>([]);\r\n    const [seeMore, setSeeMore] = useState<number>(-1);\r\n    \r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const [loadMore, setLoadMore] = useState<boolean>(false);\r\n    const [hasMore, setHasMore] = useState<boolean>(true);\r\n\r\n    const observer = useRef<IntersectionObserver>();\r\n    const lastSongElementRef = useCallback(node => {\r\n        if (loadMore || seeMore !== SEE_MORE.SONG) return;\r\n        if (observer.current) observer.current.disconnect();\r\n        observer.current = new IntersectionObserver(entries => {\r\n            if (entries[0].isIntersecting && hasMore) {\r\n                setLoadMore(true);\r\n                let first = DEFAULT_PAGE_SIZE - 1;\r\n                let offset = songList.length;\r\n                fetchSongByGenre(parseInt(id), first, offset)\r\n                    .then((data) => {\r\n                        if (!data.songs.length) {\r\n                            setHasMore(false);\r\n                        }\r\n\r\n                        setSongList([...songList, ...data.songs]);\r\n                        setLoadMore(false);\r\n                        \r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n                        setLoadMore(false);\r\n                    });\r\n                \r\n            }\r\n        })\r\n\r\n        if (node) observer.current.observe(node);\r\n    }, [loadMore, seeMore, id, songList]);\r\n\r\n    const albumObserver = useRef<IntersectionObserver>();\r\n    const lastAlbumElementRef = useCallback(node => {\r\n        if (loadMore || seeMore !== SEE_MORE.ALBUM) return;\r\n        if (albumObserver.current) albumObserver.current.disconnect();\r\n        albumObserver.current = new IntersectionObserver(entries => {\r\n            if (entries[0].isIntersecting && hasMore) {\r\n                setLoadMore(true);\r\n                let first = DEFAULT_PAGE_SIZE - 1;\r\n                let offset = albumList.length;\r\n                fetchAblumByGenre(parseInt(id), first, offset)\r\n                    .then((data) => {\r\n                        \r\n                        if (!data.albums.length) {\r\n                            setHasMore(false);\r\n                        }\r\n\r\n                        setAlbumList([...albumList, ...data.albums])\r\n                        // setCurrentPage(currentPage + 1);\r\n                        setLoadMore(false);\r\n                        \r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n                        setLoadMore(false);\r\n                    });\r\n                \r\n            }\r\n        })\r\n\r\n        if (node) albumObserver.current.observe(node);\r\n    }, [loadMore, seeMore, id, albumList]);\r\n\r\n    useEffect(() => {\r\n        dispatch(enableLoading());\r\n        fetchGenreDetail(parseInt(id))\r\n            .then((data) => {\r\n                setSongList(data.songs);\r\n                setAlbumList(data.albums);\r\n                dispatch(disableLoading());\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                dispatch(disableLoading());\r\n            }) \r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (seeMore === -1) {\r\n            if (songList.length > DEFAULT_PAGE_SIZE) {\r\n                let revertSongList = songList.slice(0, DEFAULT_PAGE_SIZE - 1);\r\n                setSongList(revertSongList);\r\n            } else {\r\n                let revertAlbumList = albumList.slice(0, DEFAULT_PAGE_SIZE - 1);\r\n                setAlbumList(revertAlbumList);\r\n            }\r\n\r\n            setHasMore(true);\r\n            setLoadMore(false);\r\n        } \r\n    }, [seeMore]);\r\n    \r\n    const handlePlay = (album_id: number) => {\r\n        fetchSongsByAlbumId(album_id)\r\n            .then((data) => {\r\n                playSong(data.songs);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const handleNavigate = (album_id: number) => {\r\n        history.push(`${RoutePaths.Album.Index}/${album_id}`);\r\n    }\r\n\r\n    const renderSongElements = () => {\r\n        return (\r\n            songList.map((song: Song, index) => {\r\n                if (index === songList.length - 1) {\r\n                    return (\r\n                        <Col lg={2} sm={4} xs={6} key={index} ref={lastSongElementRef}>\r\n                            <Card1 \r\n                                {...song}\r\n                                size='medium'\r\n                                isPlaying={isPlaying && songs[songIndex].track_id === song.track_id}\r\n                                onClick={() => playSong([song])}\r\n                            />\r\n                        </Col>\r\n                    )\r\n                }\r\n\r\n                return (\r\n                    <Col lg={2} sm={4} xs={6} key={index}>\r\n                        <Card1 \r\n                            {...song}\r\n                            size='medium'\r\n                            isPlaying={isPlaying && songs[songIndex].track_id === song.track_id}\r\n                            onClick={() => playSong([song])}\r\n                        />\r\n                    </Col>\r\n                )\r\n            })\r\n        )\r\n    };\r\n\r\n    const renderAlbumElements = () => {\r\n        return albumList.map((album: Album, index) => {\r\n            if (index === albumList.length - 1) {\r\n                return (\r\n                    <Col lg={2} sm={4} xs={6} key={index} ref={lastAlbumElementRef}>\r\n                        <Card2  \r\n                            {...album}\r\n                            size='medium'\r\n                            handleNavigate={() => handleNavigate(album.album_id)}\r\n                            handlePlay={() => handlePlay(album.album_id)}\r\n                        />\r\n                    </Col>\r\n                )\r\n            }\r\n\r\n            return (\r\n                <Col lg={2} sm={4} xs={6} key={index}>\r\n                    <Card2  \r\n                        {...album}\r\n                        size='medium'\r\n                        handleNavigate={() => handleNavigate(album.album_id)}\r\n                        handlePlay={() => handlePlay(album.album_id)}\r\n                    />\r\n                </Col>\r\n            )\r\n        })\r\n    };\r\n\r\n    const toggleSeeMore = (mode: number) => {\r\n        if (mode !== seeMore) {\r\n            setSeeMore(mode);\r\n        } else {\r\n            setSeeMore(-1);\r\n            handleScrollToTop()\r\n        }\r\n    }\r\n\r\n    const handleScrollToTop = () => {\r\n        $('body').animate({ scrollTop: 0 }, 'slow');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"genre-detail-container custom-container\">\r\n                <h1 className=\"page-title\">\r\n                    {title}\r\n                </h1>\r\n\r\n                {seeMore !== SEE_MORE.ALBUM ? (\r\n                    <section className='genre-song'>\r\n                        <div className=\"d-flex align-items-end justify-content-between\">\r\n                            <h2 className='section-title mb-20'>\r\n                                Song 🤘\r\n                            </h2>\r\n\r\n                            <span \r\n                                className='txt-link text-center mt-12 mb-20'\r\n                                onClick={() => toggleSeeMore(SEE_MORE.SONG)}\r\n                            >\r\n                                {seeMore === SEE_MORE.SONG ? 'See Less' : 'See More'}\r\n                            </span>\r\n                        </div>\r\n                        \r\n\r\n                        {songList.length ? (\r\n                            <Row>\r\n                                {renderSongElements()}\r\n                            </Row>\r\n                        ) : null}\r\n                    </section>\r\n                ) : null}\r\n\r\n                {seeMore !== SEE_MORE.SONG ? (\r\n                    <section className='genre-album'>\r\n                        <div className=\"d-flex align-items-end justify-content-between\">\r\n                            <h2 className='section-title mb-20'>\r\n                                Album 😎\r\n                            </h2>\r\n\r\n                            <span \r\n                                className='txt-link text-center mt-12 mb-20'\r\n                                onClick={() => toggleSeeMore(SEE_MORE.ALBUM)}\r\n                            >\r\n                                {seeMore === SEE_MORE.ALBUM ? 'See Less' : 'See More'}\r\n                            </span>\r\n                        </div>\r\n                        \r\n\r\n                        {albumList.length ? (\r\n                            <Row>\r\n                                {renderAlbumElements()}\r\n                            </Row>\r\n                        ) : null}\r\n                    </section>\r\n                ) : null}\r\n\r\n                <ScrollToTopButton />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GenreDetail;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\search\\index.tsx",["578","579","580"],"import { fetchSearchResult } from 'app/api/explore';\r\nimport { Album } from 'app/models/Album';\r\nimport { Singer } from 'app/models/Singer';\r\nimport { Song } from 'app/models/Song';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { Nav, Row, Tab, Col, Badge } from 'react-bootstrap';\r\nimport { useParams } from 'react-router';\r\nimport './style.scss';\r\nimport NotFoundSong from 'assets/images/not-found-song.svg';\r\nimport NotFoundItem from 'app/components/Common/not-found-item';\r\nimport SingerSlide from './component/singer-slide';\r\nimport SongSlide from 'app/components/Common/song-slide';\r\nimport AlbumSlide from 'app/components/Common/album-slide';\r\nimport SearchTabContent from './component/search-tab-content';\r\nimport SingerList from './component/singer-list';\r\nimport SongList from './component/song-list';\r\nimport AlbumList from './component/album-list';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { disableLoading, enableLoading } from 'app/redux/modules/loading';\r\nimport { RootState } from 'app/redux';\r\nimport Loading from 'app/components/Common/loading';\r\nimport { DEFAULT_PAGE_SIZE } from 'app/constants/pagination';\r\n\r\nconst eventKey = {\r\n    All: 0,\r\n    Singer: 1,\r\n    Song: 2,\r\n    Album: 3,\r\n};\r\n\r\ninterface RouteParams {\r\n    keyword: string,\r\n}\r\n\r\nconst SearchPage: React.FC = () => {\r\n    const params = useParams<RouteParams>();\r\n    let { keyword } = params;\r\n\r\n    const dispatch = useDispatch();\r\n    const { isLoading } = useSelector((state: RootState) => state.loading);\r\n\r\n    const [resultSong, setResultSong] = useState<Array<Song>>([]);\r\n    const [topSong, setTopSong] = useState<Array<Song>>([]);\r\n\r\n    const [resultAlbum, setResultAlbum] = useState<Array<Album>>([]);\r\n    const [topAlbum, setTopAlbum] = useState<Array<Album>>([]);\r\n\r\n    const [resultArtist, setResultArtist] = useState<Array<Singer>>([]);\r\n    const [topArtist, setTopArtist] = useState<Array<Singer>>([]);\r\n    const [tab, setTab] = useState<Array<{\r\n        title: string,\r\n        eventKey: number,\r\n        total: number,\r\n    }>>([]);\r\n\r\n    useEffect(() => {\r\n        dispatch(enableLoading());\r\n\r\n        fetchSearchResult(keyword)\r\n            .then((data) => {\r\n                console.log(data)\r\n                let menu: Array<{\r\n                    title: string,\r\n                    eventKey: number,\r\n                    total: number,\r\n                }> = [];\r\n                \r\n                const {artists, songs, albums} = data;\r\n                setResultArtist(artists);\r\n                setResultSong(songs);\r\n                setResultAlbum(albums);\r\n\r\n                let artistLength = artists.length;\r\n                let songLength = songs.length;\r\n                let albumLength = albums.length;\r\n\r\n                if (artistLength || songLength || albumLength) {\r\n                    menu.push({\r\n                        title: 'All',\r\n                        eventKey: eventKey.All,\r\n                        total: artistLength + songLength + albumLength,\r\n                    });\r\n\r\n                    if (artistLength) {\r\n                        setTopArtist(artists.slice(0, 4));\r\n\r\n                        menu.push({\r\n                            title: 'Singer',\r\n                            eventKey: eventKey.Singer,\r\n                            total: artistLength,\r\n                        });\r\n                    }\r\n\r\n                    if (songLength) {\r\n                        setTopSong(songs.slice(0, 6));\r\n\r\n                        menu.push({\r\n                            title: 'Song',\r\n                            eventKey: eventKey.Song,\r\n                            total: songLength,\r\n                        });\r\n                    }\r\n\r\n                    if (albumLength) {\r\n                        setTopAlbum(albums.slice(0, 6));\r\n\r\n                        menu.push({\r\n                            title: 'Album',\r\n                            eventKey: eventKey.Album,\r\n                            total: albumLength,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                setTab(menu);\r\n\r\n                if (!artistLength) {\r\n                    setTopArtist([]);\r\n                }\r\n                \r\n                if (!songLength) {\r\n                    setTopSong([]);\r\n                }\r\n\r\n                if (!albumLength) {\r\n                    setTopAlbum([]);\r\n                }\r\n                \r\n                dispatch(disableLoading());\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                dispatch(disableLoading());\r\n            });\r\n    }, [keyword]);\r\n\r\n    const renderTab = () => {\r\n        return tab?.map(({title, eventKey, total}, index) => {\r\n            return (\r\n                <Nav.Item className=\"search-nav-item\" key={index}>\r\n                    <Nav.Link \r\n                        eventKey={eventKey} \r\n                        className='d-flex justify-content-between search-nav-link'>\r\n                        <span>\r\n                            {title}\r\n                        </span>\r\n                        <Badge \r\n                            as='div'\r\n                            className='d-flex justify-content-center align-items-center search-nav-badge'>\r\n                            {total}\r\n                        </Badge>\r\n                    </Nav.Link>\r\n                </Nav.Item>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"search-container custom-container h-100 d-flex flex-column\">\r\n                <h1 className=\"page-title\">\r\n                    Search result\r\n                </h1>\r\n\r\n                {isLoading ? <Loading /> : (\r\n                    <>\r\n                        {tab.length ? (\r\n                            <Tab.Container defaultActiveKey={eventKey.All}>\r\n                                <Row className='flex-fill'>\r\n                                    <Col md={3} sm={4}>\r\n                                        <Nav className=\"flex-column search-left-tab\">\r\n                                            {renderTab()}\r\n                                        </Nav>\r\n                                    </Col>\r\n\r\n                                    <Col md={9} sm={8}>\r\n                                        <Tab.Content className='h-100'>\r\n                                            <Tab.Pane eventKey={eventKey.All}>\r\n                                                <div className='tab-all'>\r\n                                                    {resultArtist.length ? <SingerSlide singerList={topArtist}/> : null}\r\n                                                    \r\n                                                    {resultSong.length ? (\r\n                                                        <SongSlide\r\n                                                            title='Song'\r\n                                                            songList={topSong}/>\r\n                                                    ) : null}\r\n                                                    \r\n                                                    {resultAlbum.length ? (\r\n                                                        <AlbumSlide \r\n                                                            title='Album'\r\n                                                            albumList={topAlbum}/>\r\n                                                    ) : null}\r\n                                                    \r\n                                                </div>\r\n                                            </Tab.Pane>\r\n\r\n                                            <Tab.Pane eventKey={eventKey.Singer}>\r\n                                                <SearchTabContent title='Singer'>\r\n                                                    <SingerList singerList={resultArtist}/>\r\n                                                </SearchTabContent>\r\n                                            </Tab.Pane>\r\n\r\n                                            <Tab.Pane eventKey={eventKey.Song}>\r\n                                                <SearchTabContent title='Song'>\r\n                                                    <SongList songList={resultSong} />\r\n                                                </SearchTabContent>\r\n                                            </Tab.Pane>\r\n\r\n                                            <Tab.Pane eventKey={eventKey.Album}>\r\n                                                <SearchTabContent title='Album'>\r\n                                                    <AlbumList albumList={resultAlbum}/>\r\n                                                </SearchTabContent>\r\n                                            </Tab.Pane>\r\n                                        </Tab.Content>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Tab.Container>\r\n                            ) : (\r\n                                <NotFoundItem text=\"Can't found any song, albums, singerss\">\r\n                                    <img src={NotFoundSong} alt='not found sond' />\r\n                                </NotFoundItem>\r\n                            )\r\n                        }\r\n                    </>\r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n} \r\n\r\nexport default SearchPage;","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\singer-detail\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\player\\actions.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\player\\reducer.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\ScrollToTop.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\constants\\pagination.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\api\\explore.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\helpers\\player.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\home\\banner\\index.tsx",["581"],"import './style.scss';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport SwiperCore, { Pagination, Autoplay } from 'swiper';\r\nimport CustomButton from 'app/components/Common/button';\r\nimport 'swiper/components/pagination/pagination.scss';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport ArrowRight from 'assets/images/arrow-right-icon.svg';\r\nimport $ from 'jquery';\r\nimport { bannerImage } from '../../../data/banner-image';\r\n\r\nSwiperCore.use([Pagination, Autoplay]);\r\n\r\nconst Banner: React.FC = () => {\r\n\tconst imagesSlide = bannerImage.map((image, index) => (\r\n\t\t<SwiperSlide \r\n\t\t\tkey={ index } \r\n\t\t\tclassName=\"banner-slide\" \r\n\t\t\ttag=\"li\">\r\n\t\t\t<div className=\"img-slide\">\r\n\t\t\t\t<img src={image} alt='top song, album'></img>\r\n\t\t\t</div>\r\n\t\t</SwiperSlide>\r\n\t));\r\n\r\n\tconst handleScroll = () => {\r\n\t\t$('.latest-song')[0].scrollIntoView({behavior: 'smooth'});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<section className='banner'>\r\n\t\t\t<Row className='justify-content-between align-items-center'>\r\n\t\t\t\t<Col lg={6}>\r\n\t\t\t\t\t<div className='banner-left'>\r\n\t\t\t\t\t\t<div className=\"txt-banner\">\r\n\t\t\t\t\t\t\tLet&nbsp;\r\n\t\t\t\t\t\t\t<span className=\"txt-special\">Music Flow In Your Heart</span> And&nbsp;\r\n\t\t\t\t\t\t\t<span className=\"txt-special\">Enrich Your Soul</span>&nbsp;✌️\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div className='discover-btn'>\r\n\t\t\t\t\t\t\t<CustomButton\r\n\t\t\t\t\t\t\t\tsize='large'\r\n\t\t\t\t\t\t\t\tcolor='black'\r\n\t\t\t\t\t\t\t\tshape='round'\r\n\t\t\t\t\t\t\t\tonClick={handleScroll}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<span className='mr-12'>Discovery</span>\r\n\t\t\t\t\t\t\t\t<img src={ArrowRight} alt='arrow right' />\r\n\t\t\t\t\t\t\t</CustomButton>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Col>\r\n\t\t\t\t\r\n\t\t\t\t<Col lg={6}>\r\n\t\t\t\t\t<div className=\"slide-block\">\r\n\t\t\t\t\t\t<Swiper\r\n\t\t\t\t\t\t\tslidesPerView=\"auto\"\r\n\t\t\t\t\t\t\tspaceBetween={5}\r\n\t\t\t\t\t\t\tpagination={{\r\n\t\t\t\t\t\t\t\tel: \".swiper-pagination\", // little dots under the slides for navigation\r\n\t\t\t\t\t\t\t\tclickable: true\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tautoplay\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{imagesSlide}\r\n\t\t\t\t\t\t</Swiper>\r\n\r\n\t\t\t\t\t\t<div className=\"swiper-pagination\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport default Banner;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\home\\chart\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\home\\genre\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\search\\component\\singer-slide\\index.tsx",["582"],"import React from 'react';\r\nimport './style.scss';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport SwiperCore, { Navigation } from 'swiper';\r\nimport PreviousButton from 'assets/images/arrow-left.svg';\r\nimport NextButton from 'assets/images/arrow-right.svg';\r\nimport { playSong } from 'app/helpers/player';\r\nimport { Singer } from 'app/models/Singer';\r\nimport CardSinger from 'app/components/Common/card-singer';\r\n\r\nSwiperCore.use([Navigation]);\r\n\r\ninterface Props {\r\n    singerList: Array<Singer>,\r\n}\r\n\r\nconst SingerSlide: React.FC<Props> = (props: Props) => {\r\n    const { singerList } = props;\r\n\r\n    const singerSlide = singerList.map((singer: Singer) => {\r\n        return (\r\n            <SwiperSlide key={singer.singer_id} className=\"singer-slide__post\" >\r\n                <CardSinger\r\n                    {...singer}\r\n                    size='small'\r\n                />\r\n            </SwiperSlide>\r\n        );\r\n    });\r\n    \r\n    return (\r\n        <section className='singer-slide slide'>\r\n            <div className=\"slide-header\">\r\n                <h3 className='section-title'>\r\n                    Singer\r\n                </h3>\r\n\r\n                <div>\r\n                    <img\r\n                        className=\"singer-slide__swiper-prev\"\r\n                        src={PreviousButton}\r\n                        alt=\"Previous slide\"\r\n                    />\r\n\r\n                    <img className=\"singer-slide__swiper-next\" src={NextButton} alt=\"Next slide\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"singer-slide__content\">\r\n                {singerList.length ? (\r\n                    <Swiper\r\n                        slidesPerView=\"auto\"\r\n                        navigation={{\r\n                            nextEl: \".singer-slide__swiper-next\",\r\n                            prevEl: \".singer-slide__swiper-prev\",\r\n                            disabledClass: \"singer-slide__swiper-button--disabled\",\r\n                        }}\r\n                    >\r\n                        {singerSlide}\r\n                    </Swiper>\r\n                ) : null}\r\n                \r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default SingerSlide;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\search\\component\\search-tab-content\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\search\\component\\singer-list\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\search\\component\\song-list\\index.tsx",["583"],"import Card1 from 'app/components/Common/card1';\r\nimport { calculateIndex, getPager, getTotalPage } from 'app/helpers/pagination';\r\nimport { playSong } from 'app/helpers/player';\r\nimport { Song } from 'app/models/Song';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport CustomPagination from '../custom-pagination';\r\nimport './style.scss';\r\nimport $ from 'jquery';\r\n\r\ninterface Props {\r\n    songList: Array<Song>,\r\n}\r\n\r\nconst SongList: React.FC<Props> = (props: Props) => {\r\n    const { songList } = props;\r\n    // const [ totalPage, setTotalPage ] = useState<number>(0);\r\n    // const [ currentPage, setCurrentPage ] = useState<number>(1);\r\n    const [ songs, setSongs ] = useState<Array<Song>>([]);\r\n\r\n    useEffect(() => {\r\n        // const { startIndex, endIndex } = calculateIndex(1, songList.length);\r\n        // setSongs(songList.slice(startIndex, endIndex));\r\n        // let totalItems = songList.length;\r\n\r\n        // setTotalPage(getTotalPage(totalItems));\r\n\r\n        \r\n    }, []);\r\n\r\n    const [ totalPage, setTotalPage ] = useState<number>(0);\r\n    const [ currentPage, setCurrentPage ] = useState<number>(0);\r\n    const [ startPage, setStartPage ] = useState<number>(0);\r\n    const [ endPage, setEndPage ] = useState<number>(0);\r\n    let songListRef = useRef<HTMLDivElement>();\r\n\r\n    useEffect(() => {\r\n        let totalPage = getTotalPage(songList.length);\r\n        setTotalPage(totalPage);\r\n        let { startPage, endPage } = getPager(totalPage);\r\n        setStartPage(startPage);\r\n        setEndPage(endPage);\r\n        setCurrentPage(1);\r\n    }, [songList.length]);\r\n    \r\n    useEffect(() => {\r\n        if (currentPage) {\r\n            $('body').animate({ scrollTop: 0 }, 'slow');\r\n            let { startPage, endPage } = getPager(totalPage, currentPage);\r\n            setStartPage(startPage);\r\n            setEndPage(endPage);\r\n            let { startIndex, endIndex } = calculateIndex(currentPage, songList.length);\r\n            setSongs(songList.slice(startIndex, endIndex + 1));\r\n            \r\n            // \r\n        }\r\n    }, [currentPage]);\r\n\r\n    const handleChoosePage = (page: number) => {\r\n        setCurrentPage(page);\r\n    }\r\n\r\n    const renderSongList = () => {\r\n        return songs.map((song: Song, index: number) => {\r\n            return (\r\n                <Col md={3} sm={4} xs={6} key={song.track_id}>\r\n                    <Card1 \r\n                        {...song}\r\n                        size='medium'\r\n                        onClick={() => playSong([song])} \r\n                    />\r\n                </Col>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row ref={(ref: any) => songListRef.current = ref} className='search-list'>\r\n                {renderSongList()}\r\n            </Row>\r\n\r\n            {currentPage > 0 ? (\r\n                <CustomPagination\r\n                    handleChoosePage={handleChoosePage}\r\n                    startPage={startPage}\r\n                    endPage={endPage}\r\n                    currentPage={currentPage}\r\n                    totalPage={totalPage}\r\n                />\r\n            ) : null}\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default SongList;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\search\\component\\album-list\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\header\\index.tsx",["584","585"],"import { RoutePaths } from 'app/constants';\r\nimport useClickOutside from 'app/hooks/useClickOutside';\r\nimport { RootState } from 'app/redux';\r\nimport HamburgerIcon from 'assets/images/hamburger-icon.svg';\r\nimport Logo from 'assets/images/logo.png';\r\nimport SearchIcon from 'assets/images/search-icon.svg';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Col, Dropdown, Form, Nav, Navbar, Row } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink, useHistory, useLocation } from 'react-router-dom';\r\nimport './style.scss';\r\nimport ArrowDown from 'assets/images/arrow-down.svg';\r\nimport { signOut } from 'app/redux/modules/auth';\r\nimport ModalLogin from '../modal-login';\r\n\r\ninterface Props {\r\n    showSidebar: boolean,\r\n    toggleSidebar: () => void\r\n}\r\n\r\nconst Header: React.FC<Props> = (props: Props) => {\r\n    const { toggleSidebar, showSidebar } = props;\r\n    const [inputVisible, setInputVisible] = useState<boolean>(false);\r\n    const [keyword, setKeyWord] = useState<string>('');\r\n    const history = useHistory();\r\n    const { pathname } = useLocation();\r\n    let searchInputRef = useRef<any>();\r\n\r\n    const { access_token, name, image } = useSelector((state: RootState) => state.auth);\r\n    const dispatch = useDispatch();\r\n    const [isVisible, setVisible] = useState<boolean>(false);\r\n    \r\n    useEffect(() => {\r\n        \r\n    }, [searchInputRef]);\r\n\r\n    useEffect(() => {\r\n        if (!/\\/search/.test(pathname) && keyword) {\r\n            closeSearch()\r\n        }\r\n    }, [pathname]);\r\n\r\n    const toggleModalLogin = () => {\r\n        setVisible(!isVisible)\r\n    }\r\n\r\n    const handleSearch = (e: any) => {\r\n        e.preventDefault();\r\n        if (keyword) {\r\n            history.push(`${RoutePaths.Search.Index}/${keyword}`);\r\n        } else {\r\n            setInputVisible(!inputVisible);\r\n        }\r\n    }\r\n\r\n    const handleChange = (e: any) => {\r\n        setKeyWord(e.target.value);\r\n    }\r\n\r\n    const closeSearch = () => {\r\n        setKeyWord('');\r\n        setInputVisible(false);\r\n    }\r\n\r\n    useClickOutside(searchInputRef, closeSearch);\r\n\r\n    const handleSignOut = () => {\r\n        localStorage.removeItem('access_token');\r\n        dispatch(signOut());\r\n    }\r\n\r\n    return (\r\n        <header className={`header ${showSidebar && 'show-sidebar'}`}>\r\n            <div className=\"custom-container h-100\">\r\n                <Row className='align-items-center justify-content-between h-100'>\r\n                    <Col md={5} xs={1}>\r\n                        <div className='hamburger-icon pointer' onClick={toggleSidebar}>\r\n                            <img src={HamburgerIcon} alt='hamburger menu'/>\r\n                        </div>\r\n\r\n                        <Navbar className='w-100'>\r\n                            <NavLink to={RoutePaths.Home.Index}>\r\n                                <img className='logo-img' src={Logo} alt='app logo'/>\r\n                            </NavLink>\r\n\r\n                            <Nav>\r\n                                <NavLink \r\n                                    to={RoutePaths.Home.Index}\r\n                                    exact\r\n                                    className='menu-item' \r\n                                    activeClassName='menu-item--active'\r\n                                >\r\n                                    Discovery\r\n                                </NavLink>\r\n\r\n                                <NavLink \r\n                                    to={RoutePaths.Genre.Index}\r\n                                    exact\r\n                                    className='menu-item'\r\n                                    activeClassName='menu-item--active'\r\n                                >\r\n                                    Genre\r\n                                </NavLink>\r\n\r\n                                <NavLink \r\n                                    to={RoutePaths.Singer.Index}\r\n                                    exact\r\n                                    className='menu-item'\r\n                                    activeClassName='menu-item--active'\r\n                                >\r\n                                    Singer\r\n                                </NavLink>\r\n                            </Nav>\r\n                        </Navbar>\r\n                    </Col>\r\n\r\n                    <Col md={5} xs={7} className='text-right d-flex justify-content-end align-items-center'>\r\n                        <Form inline className='search-box' onSubmit={handleSearch}>\r\n                            <div \r\n                                className={`d-flex w-100 search-input-group justify-content-end ${inputVisible ? 'show' : 'hide'}`}\r\n                                ref={el => searchInputRef.current = el}>\r\n                                <input \r\n                                    placeholder='Search'\r\n                                    className='search-input'\r\n                                    onChange={handleChange}\r\n                                    value={keyword}\r\n                                />\r\n\r\n                                <div \r\n                                    className='d-flex align-items-center search-icon-container pointer'\r\n                                    onClick={handleSearch}>\r\n                                    <img className='search-icon' src={SearchIcon} alt='search' />\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n\r\n                        <div className='user d-none d-md-inline'>\r\n                            {access_token ? (\r\n                                <>\r\n                                    <Dropdown>\r\n                                        <Dropdown.Toggle className='user-dropdown'>\r\n                                            <img className=\"user-avatar\" src={image} alt='user avatar' />\r\n                                            <span className=\"user-name\">    \r\n                                                {name}\r\n                                            </span>\r\n                                            <img className=\"arrow\" src={ArrowDown} />\r\n                                        </Dropdown.Toggle>\r\n\r\n                                        <Dropdown.Menu>\r\n                                            <Dropdown.Item onClick={handleSignOut}>\r\n                                                Log Out\r\n                                            </Dropdown.Item>\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                </>\r\n                                ) : (\r\n                                    <span className='signin pointer' onClick={toggleModalLogin}>\r\n                                        Sign In\r\n                                    </span>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n            \r\n            <ModalLogin \r\n                show={isVisible}\r\n                handleClose={toggleModalLogin}\r\n            />\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\controller\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\sidebar\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\loading\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\card-singer\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\album-slide\\index.tsx",["586"],"import './style.scss';\r\nimport PlaylistCard from 'app/components/Common/card2';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport SwiperCore, { Navigation } from 'swiper';\r\nimport PreviousButton from 'assets/images/arrow-left.svg';\r\nimport NextButton from 'assets/images/arrow-right.svg';\r\nimport { Album } from 'app/models/Album';\r\nimport { fetchSongsByAlbumId } from 'app/api/explore';\r\nimport { playSong } from 'app/helpers/player';\r\nimport { useHistory } from 'react-router';\r\nimport { RoutePaths } from 'app/constants';\r\n\r\nSwiperCore.use([Navigation]);\r\n\r\ninterface Props {\r\n    albumList: Array<Album>,\r\n    title: string,\r\n    colorBg?: boolean,\r\n}\r\n\r\nconst AlbumSlide: React.FC<Props> = (props: Props) => {\r\n    const { title, albumList, colorBg } = props;\r\n    const history = useHistory();\r\n     \r\n    const handlePlay = (album_id: number) => {\r\n        fetchSongsByAlbumId(album_id)\r\n            .then((data) => {\r\n                console.log(data);\r\n                playSong(data.songs);\r\n            })\r\n    }\r\n\r\n    const handleNavigate = (album: Album) => {\r\n        history.push(`${RoutePaths.Album.Index}/${album.album_id}/${album.title}`);\r\n    }\r\n\r\n    const albumSlide = albumList.map((album) => {\r\n        return (\r\n            <SwiperSlide key={album.album_id} className=\"album-slide__playlist\">\r\n                <PlaylistCard \r\n                    {...album}\r\n                    handlePlay={() => handlePlay(album.album_id)}\r\n                    handleNavigate={() => handleNavigate(album)} \r\n                />\r\n            </SwiperSlide>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <section className='album-slide slide'>\r\n            <div className=\"slide-header\">\r\n                <div className=\"d-flex align-items-end\">\r\n                    <h3 className='section-title'>\r\n                        {title}\r\n                    </h3>\r\n                </div>\r\n\r\n                <div>\r\n                    <img\r\n                        className=\"album-slide__swiper-prev\"\r\n                        src={PreviousButton}\r\n                        alt=\"Previous slide\"\r\n                    />\r\n                    <img className=\"album-slide__swiper-next\" src={NextButton} alt=\"Next slide\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"album-slide__content\">\r\n                {albumList.length ? (\r\n                    <Swiper\r\n                        slidesPerView=\"auto\"\r\n                        navigation={{\r\n                            nextEl: \".album-slide__swiper-next\",\r\n                            prevEl: \".album-slide__swiper-prev\",\r\n                            disabledClass: \"album-slide__swiper-button--disabled\",\r\n                        }}\r\n                    >\r\n                        {albumSlide}\r\n                    </Swiper>\r\n                ) : null}\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default AlbumSlide;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\song-slide\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\button\\index.tsx",["587"],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\song-list\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\card2\\index.tsx",["588"],"import PlayIcon from 'assets/images/play-icon.svg';\r\nimport React from 'react';\r\nimport './style.scss';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { RoutePaths } from 'app/constants';\r\n\r\ninterface Props {\r\n    name?: string,\r\n    title?: string,\r\n    image: string,\r\n    singers?: string,\r\n    size?: string,\r\n    handlePlay?: () => void,\r\n    handleNavigate: () => void,\r\n    isGenre?: boolean,\r\n}\r\n\r\nconst Card2: React.FC<Props> = (props: Props) => {\r\n    const {\r\n        name,\r\n        title,\r\n        image,\r\n        singers,\r\n        size = 'small',\r\n        handlePlay,\r\n        handleNavigate,\r\n        isGenre,\r\n    } = props;\r\n\r\n    const renderSingers = () => {\r\n        let singerArr = singers?.split(', ');\r\n        let total = singerArr ? singerArr.length - 1 : 0;\r\n\r\n        return singerArr && singerArr.map((singer, index) => {\r\n            let subArr = singer.split('  ');\r\n            let text = `${subArr[1]}${index !== total ? ', ' : ''}`;\r\n            return (\r\n                <NavLink \r\n                    key={subArr[0]}\r\n                    className='artist-name'\r\n                    to={`${RoutePaths.Singer.Index}/${subArr[0]}/${subArr[1]}`}\r\n                >\r\n                    {text}\r\n                </NavLink>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='card'>\r\n            <div \r\n                className={`${isGenre ? 'card__cover--genre' : 'card__cover pointer'}`} \r\n                data-size={size}\r\n                onClick={() => {if (handlePlay) handlePlay()}}>\r\n                <div className=\"img-container\">\r\n                    <img\r\n                        src={image}\r\n                        alt=''\r\n                    />\r\n                </div>\r\n                \r\n\r\n                {!isGenre && (\r\n                    <div className='card__layer'>\r\n                        <div className='button-container d-flex justify-content-center align-items-center'>\r\n                            <img className='control-btn' src={PlayIcon}/>\r\n                            {/* <Row className='justify-content-center align-items-center' noGutters={true}>\r\n                                <Col xs='auto'>\r\n                                    <img className='react' src={isLove ? HeartActive : HeartDefault} />\r\n                                </Col>\r\n\r\n                                <Col xs='auto'>\r\n                                    \r\n                                </Col>\r\n\r\n                                <Col xs='auto'>\r\n                                    <img className='more-btn' src={MoreIcon} />\r\n                                </Col>\r\n                            </Row> */}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            <div className='card__meta pointer' data-size={size}>\r\n                <div\r\n                    className='name'\r\n                    data-size={size}\r\n                    onClick={handleNavigate}>\r\n                    {title || name}\r\n                </div>\r\n\r\n                {!isGenre && (\r\n                    <div\r\n                        className='artist'\r\n                        data-size={size}>\r\n                        {renderSingers()}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card2;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\card1\\index.tsx",["589"],"import { RoutePaths } from 'app/constants';\r\nimport { Song } from 'app/models/Song';\r\nimport PauseIcon from 'assets/images/pause-icon.svg';\r\nimport PlayIcon from 'assets/images/play-icon.svg';\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './style.scss';\r\n\r\ninterface Props extends Song {\r\n    isPlaying?: boolean,\r\n    size?: string,\r\n    onClick: () => void,\r\n    theme?: 'dark',\r\n}\r\n\r\nconst Card1: React.FC<Props> = (props: Props) => {\r\n    const {\r\n        image,\r\n        title,\r\n        singers,\r\n        isPlaying,\r\n        size = 'small',\r\n        onClick,\r\n        theme,\r\n    } = props;\r\n\r\n    const renderSingers = () => {\r\n        let singerArr = singers.split(', ');\r\n        let total = singerArr.length;\r\n\r\n        return singerArr.map((singer, index) => {\r\n            let subArr = singer.split('  ');\r\n            \r\n            return (\r\n                <NavLink \r\n                    key={subArr[0]}\r\n                    className='artist-name'\r\n                    to={`${RoutePaths.Singer.Index}/${subArr[0]}/${subArr[1]}`}\r\n                >\r\n                    {`${subArr[1]}${index !== total - 1 ? ', ' : ''}`}\r\n                </NavLink>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='song-card'>\r\n            <div className='song-card-top pointer' onClick={onClick}>\r\n                <div className=\"song-img-container\">\r\n                    <img src={image} alt=\"\" />\r\n                </div>\r\n                \r\n                <div className='layer'>\r\n                    <div className='button-container d-flex justify-content-center align-items-center'>\r\n                        <img className='control-btn' src={isPlaying ? PauseIcon : PlayIcon} />\r\n                        {/* <Row className='justify-content-center align-items-center' noGutters={true}>\r\n                            <Col xs='auto'>\r\n                                <img className='react' src={isLove ? HeartActive : HeartDefault} />\r\n                            </Col>\r\n\r\n                            <Col xs='auto'>\r\n                                \r\n                            </Col>\r\n\r\n                            <Col xs='auto'>\r\n                                <img className='more-btn' src={MoreIcon} />\r\n                            </Col>\r\n                        </Row> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='song-info' data-size={size}>\r\n                <div\r\n                    className={`song-name ${theme && 'txt-white'}`}\r\n                    data-size={size}>\r\n                    {title}\r\n                </div>\r\n\r\n                <div\r\n                    className='artist'\r\n                    data-size={size}>\r\n                    {renderSingers()}\r\n                </div>\r\n                {/* <Row className='align-items-center'>\r\n                    <Col>\r\n                        \r\n\r\n                        \r\n                    </Col>\r\n\r\n                    <Col className='song-react' data-size={size}>\r\n                        <img \r\n                            src={isLove ? HeartActive : HeartDefault} \r\n                        />\r\n                    </Col>\r\n                </Row> */}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Card1;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\scroll-to-top-button\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\not-found-item\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\nowplaying\\index.tsx",["590","591"],"import { Song } from 'app/models/Song';\r\nimport { playChosenSong, togglePlayMusic } from 'app/redux/modules/player';\r\nimport React from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport SongList from '../song-list';\r\nimport './styles.scss';\r\nimport LyricNotFound from 'assets/images/not-found-lyric.svg';\r\nimport NotFoundItem from '../not-found-item';\r\n\r\ninterface Props {\r\n\tsongs: Array<Song>,\r\n\tsongIndex: number,\r\n\tisPlaying: boolean,\r\n\tshowPlayingList: boolean\r\n}\r\n\r\nconst NowPlaying: React.FC<Props> = (props: Props) => {\r\n\tconst { songs, songIndex, isPlaying, showPlayingList } = props;\r\n\tconst dispatch = useDispatch();\r\n\t\r\n\tconst renderLyric = () => {\r\n\t\tlet { lyric } = songs[songIndex];\r\n\t\t\r\n\t\tif (lyric) {\r\n\t\t\tlet lyricRows = lyric.split(/{\"\\\\n\"}/);\r\n\t\t\t\r\n\t\t\treturn lyricRows.map((ele, index) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<p className='lyric-row w-100 text-center' key={index}>\r\n\t\t\t\t\t\t{ele}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className='lyric-not-found'>\r\n\t\t\t\t<img src={LyricNotFound} />\r\n\t\t\t\t<p className='lyric-not-found-txt'>\r\n\t\t\t\t\tThis song doesn't have lyric\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tconst handlePlay = (index: number) => {\r\n\t\tif (isPlaying && index === songIndex) {\r\n\t\t\tdispatch(togglePlayMusic());\r\n\t\t} else {\r\n\t\t\tdispatch(playChosenSong(index));\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className={`now-playing ${showPlayingList && 'show'}`}>\r\n\t\t\t\t<div className='custom-container h-100'>\r\n\t\t\t\t\t<Row className='h-100'>\r\n\t\t\t\t\t\t<Col md={8} sm={6} className='lyric'>\r\n\t\t\t\t\t\t\t{renderLyric()}\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col md={4} sm={6}>\r\n\t\t\t\t\t\t\t<SongList songList={songs} handlePlay={handlePlay} theme='light'/>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default NowPlaying;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\icon-button\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\data\\banner-image.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\api\\index.ts",["592"],"import axios from 'axios';\r\nimport queryString from 'query-string';\r\n\r\nexport const API = {\r\n    post: async (url: string, body: any) => {\r\n        try {\r\n            const response = await axios.post('http://' + url, body);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    },\r\n    postWithAccessToken: async (\r\n        url: string,\r\n        body: any,\r\n        access_token: string,\r\n    ) => {\r\n        try {\r\n        const response = await axios.post('http://' + url, body, {\r\n            headers: {\r\n            Authorization:\r\n                'Bearer ' + access_token,\r\n            },\r\n        });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    },\r\n    graphql: async (url: string, query: any) => {\r\n        try {\r\n            const response = await axios.post('http://' + url, {query: query});\r\n            return response.data.data;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n};\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\helpers\\pagination.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\hooks\\useClickOutside.ts",["593"],"import React from 'react';\r\n\r\nconst useClickOutside = (ref: any, callback: any) => {\r\n  const handleClick = (e:any) => {\r\n    if (ref.current && !ref.current.contains(e.target)) {\r\n      callback();\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    document.addEventListener('click', handleClick);\r\n    return () => {\r\n      document.removeEventListener('click', handleClick);\r\n    };\r\n  }, [ref]);\r\n};\r\n\r\nexport default useClickOutside;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\mode-button\\index.tsx",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\constants\\api.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\pages\\search\\component\\custom-pagination\\index.tsx",["594"],"import React, { useEffect, useState } from 'react';\r\nimport { Pagination } from 'react-bootstrap';\r\nimport './style.scss';\r\n\r\ninterface Props {\r\n    handleChoosePage: (page: number) => void,\r\n    startPage: number,\r\n    endPage: number,\r\n    currentPage: number,\r\n    totalPage: number,\r\n}\r\n\r\nconst CustomPagination: React.FC<Props> = (props: Props) => {\r\n    let { \r\n        handleChoosePage,\r\n        totalPage,\r\n        startPage,\r\n        endPage,\r\n        currentPage,\r\n    } = props;\r\n\r\n    const [pageItem, setPageItem] = useState<Array<any>>([]);\r\n\r\n    useEffect(() => {\r\n        let pages: Array<any> = [];\r\n        \r\n        for (let i = startPage; i <= endPage; i++) {\r\n            pages.push((\r\n                <Pagination.Item key={i} active={currentPage === i} onClick={() => handleChoosePage(i)}>\r\n                    {i}\r\n                </Pagination.Item>\r\n            ))\r\n        }\r\n        \r\n        setPageItem(pages);\r\n    }, [startPage, endPage, handleChoosePage, currentPage]);\r\n\r\n    const renderPages = () => {\r\n        let pages = [];\r\n        \r\n        for (let i = startPage; i <= endPage; i++) {\r\n            pages.push((\r\n                <Pagination.Item key={i} active={currentPage === i} onClick={() => handleChoosePage(i)}>\r\n                    {i}\r\n                </Pagination.Item>\r\n            ))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Pagination className='search-pagination'>\r\n                <Pagination.Prev \r\n                    disabled={currentPage === 1} \r\n                    onClick={() => currentPage !== 1 && handleChoosePage(currentPage - 1)}\r\n                />\r\n\r\n                {pageItem}\r\n\r\n                <Pagination.Next \r\n                    disabled={currentPage === totalPage} \r\n                    onClick={() => currentPage !== totalPage && handleChoosePage(currentPage + 1)}\r\n                />\r\n            </Pagination>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomPagination;\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\facebook-button\\index.tsx",[],["595","596"],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\api\\auth.ts",["597","598"],"import { API } from './index';\r\nimport { RESOURCE_URL, EXPLORE, AUTH, SIGNIN, ME } from 'app/constants/api';\r\nimport { DEFAULT_PAGE_SIZE } from 'app/constants/pagination';\r\n\r\nexport const signin = (access_token: string) => {\r\n    return API.post(RESOURCE_URL + AUTH + SIGNIN, {access_token});\r\n}\r\n\r\nexport const me = (access_token: string) => {\r\n    return API.postWithAccessToken(RESOURCE_URL + AUTH + ME, {}, access_token);\r\n}\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\auth\\index.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\auth\\actions.ts",[],"D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\redux\\modules\\auth\\reducer.ts",["599"],"import { SIGN_IN, SIGN_OUT } from \"./actions\";\r\nimport { Action } from \"app/models/redux/action\";\r\n\r\nconst initialState = {\r\n\taccess_token: localStorage.getItem('access_token'),\r\n\tname: '',\r\n\timage: ''\r\n}\r\n\r\nexport const authReducer = (\r\n\tstate: any = initialState,\r\n\taction: Action\r\n) => {\r\n\tconsole.log(action);\r\n\tswitch (action.type) {\r\n\t\t\r\n\t\tcase \"SIGN_IN\":\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t...action.payload\r\n\t\t\t};\r\n\t\tcase SIGN_OUT:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\taccess_token: null,\r\n\t\t\t\tname: '',\r\n\t\t\t\timage: ''\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","D:\\Project\\music-web-btl\\music-web-fe\\src\\app\\components\\Common\\modal-login\\index.tsx",[],{"ruleId":"600","replacedBy":"601"},{"ruleId":"602","replacedBy":"603"},{"ruleId":"604","severity":1,"message":"605","line":5,"column":8,"nodeType":"606","messageId":"607","endLine":5,"endColumn":22},{"ruleId":"608","severity":1,"message":"609","line":24,"column":5,"nodeType":"610","endLine":24,"endColumn":7,"suggestions":"611"},{"ruleId":"604","severity":1,"message":"612","line":1,"column":8,"nodeType":"606","messageId":"607","endLine":1,"endColumn":22},{"ruleId":"604","severity":1,"message":"613","line":2,"column":23,"nodeType":"606","messageId":"607","endLine":2,"endColumn":38},{"ruleId":"604","severity":1,"message":"614","line":17,"column":7,"nodeType":"606","messageId":"607","endLine":17,"endColumn":15},{"ruleId":"604","severity":1,"message":"615","line":2,"column":10,"nodeType":"606","messageId":"607","endLine":2,"endColumn":23},{"ruleId":"616","severity":1,"message":"617","line":5,"column":1,"nodeType":"618","endLine":15,"endColumn":3},{"ruleId":"608","severity":1,"message":"619","line":78,"column":7,"nodeType":"610","endLine":78,"endColumn":9,"suggestions":"620"},{"ruleId":"604","severity":1,"message":"621","line":7,"column":15,"nodeType":"606","messageId":"607","endLine":7,"endColumn":24},{"ruleId":"622","severity":1,"message":"623","line":50,"column":5,"nodeType":"624","endLine":50,"endColumn":27},{"ruleId":"622","severity":1,"message":"623","line":80,"column":10,"nodeType":"624","endLine":80,"endColumn":32},{"ruleId":"604","severity":1,"message":"625","line":13,"column":7,"nodeType":"606","messageId":"607","endLine":13,"endColumn":17},{"ruleId":"626","severity":1,"message":"627","line":123,"column":21,"nodeType":"624","endLine":123,"endColumn":45},{"ruleId":"604","severity":1,"message":"628","line":6,"column":34,"nodeType":"606","messageId":"607","endLine":6,"endColumn":45},{"ruleId":"604","severity":1,"message":"629","line":22,"column":9,"nodeType":"606","messageId":"607","endLine":22,"endColumn":13},{"ruleId":"604","severity":1,"message":"630","line":12,"column":8,"nodeType":"606","messageId":"607","endLine":12,"endColumn":18},{"ruleId":"604","severity":1,"message":"631","line":16,"column":10,"nodeType":"606","messageId":"607","endLine":16,"endColumn":18},{"ruleId":"604","severity":1,"message":"632","line":17,"column":8,"nodeType":"606","messageId":"607","endLine":17,"endColumn":16},{"ruleId":"608","severity":1,"message":"633","line":42,"column":8,"nodeType":"610","endLine":42,"endColumn":19,"suggestions":"634"},{"ruleId":"622","severity":1,"message":"623","line":113,"column":25,"nodeType":"624","endLine":116,"endColumn":27},{"ruleId":"622","severity":1,"message":"623","line":178,"column":37,"nodeType":"624","endLine":178,"endColumn":85},{"ruleId":"600","replacedBy":"635"},{"ruleId":"602","replacedBy":"636"},{"ruleId":"622","severity":1,"message":"623","line":18,"column":13,"nodeType":"624","endLine":18,"endColumn":91},{"ruleId":"622","severity":1,"message":"623","line":24,"column":13,"nodeType":"624","endLine":24,"endColumn":89},{"ruleId":"604","severity":1,"message":"637","line":16,"column":17,"nodeType":"606","messageId":"607","endLine":16,"endColumn":26},{"ruleId":"604","severity":1,"message":"638","line":16,"column":28,"nodeType":"606","messageId":"607","endLine":16,"endColumn":37},{"ruleId":"604","severity":1,"message":"639","line":102,"column":8,"nodeType":"606","messageId":"607","endLine":102,"endColumn":13},{"ruleId":"622","severity":1,"message":"623","line":35,"column":25,"nodeType":"624","endLine":35,"endColumn":95},{"ruleId":"622","severity":1,"message":"623","line":39,"column":29,"nodeType":"624","endLine":39,"endColumn":95},{"ruleId":"608","severity":1,"message":"640","line":44,"column":8,"nodeType":"610","endLine":44,"endColumn":10,"suggestions":"641"},{"ruleId":"622","severity":1,"message":"623","line":59,"column":33,"nodeType":"624","endLine":59,"endColumn":80},{"ruleId":"622","severity":1,"message":"623","line":69,"column":41,"nodeType":"624","endLine":69,"endColumn":80},{"ruleId":"608","severity":1,"message":"642","line":43,"column":8,"nodeType":"610","endLine":43,"endColumn":19,"suggestions":"643"},{"ruleId":"622","severity":1,"message":"623","line":95,"column":21,"nodeType":"624","endLine":95,"endColumn":44},{"ruleId":"604","severity":1,"message":"644","line":37,"column":11,"nodeType":"606","messageId":"607","endLine":37,"endColumn":19},{"ruleId":"626","severity":1,"message":"627","line":39,"column":13,"nodeType":"624","endLine":39,"endColumn":41},{"ruleId":"622","severity":1,"message":"623","line":66,"column":33,"nodeType":"624","endLine":66,"endColumn":61},{"ruleId":"626","severity":1,"message":"627","line":117,"column":21,"nodeType":"624","endLine":117,"endColumn":45},{"ruleId":"604","severity":1,"message":"645","line":19,"column":11,"nodeType":"606","messageId":"607","endLine":19,"endColumn":17},{"ruleId":"604","severity":1,"message":"646","line":25,"column":12,"nodeType":"606","messageId":"607","endLine":25,"endColumn":22},{"ruleId":"604","severity":1,"message":"647","line":25,"column":24,"nodeType":"606","messageId":"607","endLine":25,"endColumn":37},{"ruleId":"608","severity":1,"message":"648","line":39,"column":8,"nodeType":"610","endLine":39,"endColumn":10,"suggestions":"649"},{"ruleId":"622","severity":1,"message":"623","line":46,"column":25,"nodeType":"624","endLine":46,"endColumn":74},{"ruleId":"622","severity":1,"message":"623","line":60,"column":37,"nodeType":"624","endLine":60,"endColumn":76},{"ruleId":"604","severity":1,"message":"650","line":22,"column":31,"nodeType":"606","messageId":"607","endLine":22,"endColumn":38},{"ruleId":"608","severity":1,"message":"651","line":128,"column":8,"nodeType":"610","endLine":128,"endColumn":10,"suggestions":"652"},{"ruleId":"604","severity":1,"message":"653","line":2,"column":8,"nodeType":"606","messageId":"607","endLine":2,"endColumn":16},{"ruleId":"604","severity":1,"message":"654","line":1,"column":8,"nodeType":"606","messageId":"607","endLine":1,"endColumn":18},{"ruleId":"604","severity":1,"message":"655","line":7,"column":10,"nodeType":"606","messageId":"607","endLine":7,"endColumn":18},{"ruleId":"604","severity":1,"message":"628","line":3,"column":10,"nodeType":"606","messageId":"607","endLine":3,"endColumn":21},{"ruleId":"604","severity":1,"message":"656","line":4,"column":10,"nodeType":"606","messageId":"607","endLine":4,"endColumn":16},{"ruleId":"622","severity":1,"message":"623","line":25,"column":21,"nodeType":"624","endLine":25,"endColumn":60},{"ruleId":"608","severity":1,"message":"648","line":46,"column":8,"nodeType":"610","endLine":46,"endColumn":10,"suggestions":"657"},{"ruleId":"608","severity":1,"message":"658","line":84,"column":8,"nodeType":"610","endLine":84,"endColumn":17,"suggestions":"659"},{"ruleId":"604","severity":1,"message":"660","line":14,"column":22,"nodeType":"606","messageId":"607","endLine":14,"endColumn":33},{"ruleId":"608","severity":1,"message":"661","line":37,"column":8,"nodeType":"610","endLine":37,"endColumn":18,"suggestions":"662"},{"ruleId":"600","replacedBy":"663"},{"ruleId":"602","replacedBy":"664"},{"ruleId":"608","severity":1,"message":"665","line":27,"column":5,"nodeType":"610","endLine":27,"endColumn":7,"suggestions":"666"},{"ruleId":"604","severity":1,"message":"612","line":1,"column":8,"nodeType":"606","messageId":"607","endLine":1,"endColumn":22},{"ruleId":"604","severity":1,"message":"667","line":9,"column":8,"nodeType":"606","messageId":"607","endLine":9,"endColumn":23},{"ruleId":"608","severity":1,"message":"668","line":22,"column":5,"nodeType":"610","endLine":22,"endColumn":15,"suggestions":"669"},{"ruleId":"608","severity":1,"message":"670","line":48,"column":8,"nodeType":"610","endLine":48,"endColumn":29,"suggestions":"671"},{"ruleId":"608","severity":1,"message":"672","line":54,"column":8,"nodeType":"610","endLine":54,"endColumn":10,"suggestions":"673"},{"ruleId":"604","severity":1,"message":"674","line":3,"column":8,"nodeType":"606","messageId":"607","endLine":3,"endColumn":22},{"ruleId":"604","severity":1,"message":"675","line":18,"column":7,"nodeType":"606","messageId":"607","endLine":18,"endColumn":19},{"ruleId":"604","severity":1,"message":"676","line":36,"column":13,"nodeType":"606","messageId":"607","endLine":36,"endColumn":25},{"ruleId":"604","severity":1,"message":"677","line":36,"column":27,"nodeType":"606","messageId":"607","endLine":36,"endColumn":31},{"ruleId":"604","severity":1,"message":"678","line":36,"column":33,"nodeType":"606","messageId":"607","endLine":36,"endColumn":38},{"ruleId":"608","severity":1,"message":"619","line":109,"column":7,"nodeType":"610","endLine":109,"endColumn":9,"suggestions":"679"},{"ruleId":"608","severity":1,"message":"640","line":52,"column":8,"nodeType":"610","endLine":52,"endColumn":10,"suggestions":"680"},{"ruleId":"608","severity":1,"message":"681","line":58,"column":8,"nodeType":"610","endLine":58,"endColumn":19,"suggestions":"682"},{"ruleId":"604","severity":1,"message":"683","line":60,"column":11,"nodeType":"606","messageId":"607","endLine":60,"endColumn":24},{"ruleId":"604","severity":1,"message":"684","line":2,"column":10,"nodeType":"606","messageId":"607","endLine":2,"endColumn":27},{"ruleId":"604","severity":1,"message":"685","line":15,"column":12,"nodeType":"606","messageId":"607","endLine":15,"endColumn":23},{"ruleId":"604","severity":1,"message":"686","line":15,"column":25,"nodeType":"606","messageId":"607","endLine":15,"endColumn":39},{"ruleId":"604","severity":1,"message":"644","line":16,"column":12,"nodeType":"606","messageId":"607","endLine":16,"endColumn":20},{"ruleId":"604","severity":1,"message":"660","line":16,"column":22,"nodeType":"606","messageId":"607","endLine":16,"endColumn":33},{"ruleId":"608","severity":1,"message":"672","line":26,"column":8,"nodeType":"610","endLine":26,"endColumn":10,"suggestions":"687"},{"ruleId":"608","severity":1,"message":"688","line":71,"column":8,"nodeType":"610","endLine":71,"endColumn":41,"suggestions":"689"},{"ruleId":"608","severity":1,"message":"688","line":103,"column":8,"nodeType":"610","endLine":103,"endColumn":42,"suggestions":"690"},{"ruleId":"608","severity":1,"message":"640","line":117,"column":8,"nodeType":"610","endLine":117,"endColumn":10,"suggestions":"691"},{"ruleId":"608","severity":1,"message":"692","line":132,"column":8,"nodeType":"610","endLine":132,"endColumn":17,"suggestions":"693"},{"ruleId":"604","severity":1,"message":"694","line":5,"column":17,"nodeType":"606","messageId":"607","endLine":5,"endColumn":28},{"ruleId":"604","severity":1,"message":"684","line":22,"column":10,"nodeType":"606","messageId":"607","endLine":22,"endColumn":27},{"ruleId":"608","severity":1,"message":"619","line":135,"column":8,"nodeType":"610","endLine":135,"endColumn":17,"suggestions":"695"},{"ruleId":"604","severity":1,"message":"621","line":6,"column":15,"nodeType":"606","messageId":"607","endLine":6,"endColumn":24},{"ruleId":"604","severity":1,"message":"655","line":7,"column":10,"nodeType":"606","messageId":"607","endLine":7,"endColumn":18},{"ruleId":"608","severity":1,"message":"696","line":57,"column":8,"nodeType":"610","endLine":57,"endColumn":21,"suggestions":"697"},{"ruleId":"608","severity":1,"message":"698","line":41,"column":8,"nodeType":"610","endLine":41,"endColumn":18,"suggestions":"699"},{"ruleId":"622","severity":1,"message":"623","line":146,"column":45,"nodeType":"624","endLine":146,"endColumn":86},{"ruleId":"604","severity":1,"message":"650","line":22,"column":31,"nodeType":"606","messageId":"607","endLine":22,"endColumn":38},{"ruleId":"604","severity":1,"message":"629","line":22,"column":9,"nodeType":"606","messageId":"607","endLine":22,"endColumn":13},{"ruleId":"622","severity":1,"message":"623","line":66,"column":29,"nodeType":"624","endLine":66,"endColumn":74},{"ruleId":"622","severity":1,"message":"623","line":55,"column":25,"nodeType":"624","endLine":55,"endColumn":95},{"ruleId":"604","severity":1,"message":"700","line":9,"column":8,"nodeType":"606","messageId":"607","endLine":9,"endColumn":20},{"ruleId":"622","severity":1,"message":"623","line":39,"column":5,"nodeType":"624","endLine":39,"endColumn":32},{"ruleId":"604","severity":1,"message":"701","line":2,"column":8,"nodeType":"606","messageId":"607","endLine":2,"endColumn":19},{"ruleId":"608","severity":1,"message":"702","line":14,"column":6,"nodeType":"610","endLine":14,"endColumn":11,"suggestions":"703"},{"ruleId":"604","severity":1,"message":"704","line":38,"column":11,"nodeType":"606","messageId":"607","endLine":38,"endColumn":22},{"ruleId":"600","replacedBy":"705"},{"ruleId":"602","replacedBy":"706"},{"ruleId":"604","severity":1,"message":"707","line":2,"column":24,"nodeType":"606","messageId":"607","endLine":2,"endColumn":31},{"ruleId":"604","severity":1,"message":"684","line":3,"column":10,"nodeType":"606","messageId":"607","endLine":3,"endColumn":27},{"ruleId":"604","severity":1,"message":"708","line":1,"column":10,"nodeType":"606","messageId":"607","endLine":1,"endColumn":17},"no-native-reassign",["709"],"no-negated-in-lhs",["710"],"@typescript-eslint/no-unused-vars","'LoadingOverlay' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'disableLoading' and 'enableLoading'. Either include them or remove the dependency array. If 'enableLoading' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["711"],"'configureStore' is defined but never used.","'applyMiddleware' is defined but never used.","'NotFound' is assigned a value but never used.","'toAbsoluteUrl' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["712"],"'Container' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'collectors' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'NavbarBrand' is defined but never used.","'text' is assigned a value but never used.","'NowPlaying' is defined but never used.","'Dropdown' is defined but never used.","'MoreIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'songs'. Either include it or remove the dependency array.",["713"],["709"],["710"],"'songIndex' is assigned a value but never used.","'isPlaying' is assigned a value but never used.","'query' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["714"],"React Hook useEffect has a missing dependency: 'charts'. Either include it or remove the dependency array.",["715"],"'loadMore' is assigned a value but never used.","'params' is assigned a value but never used.","'artistInfo' is assigned a value but never used.","'setArtistInfo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["716"],"'colorBg' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'keyword'. Either include them or remove the dependency array.",["717"],"'PlayIcon' is defined but never used.","'CardSinger' is defined but never used.","'playSong' is defined but never used.","'Navbar' is defined but never used.",["718"],"React Hook useEffect has missing dependencies: 'albumList', 'currentPage', 'id', and 'songList'. Either include them or remove the dependency array. You can also do a functional update 'setSongList(s => ...)' if you only need 'songList' in the 'setSongList' call.",["719"],"'setLoadMore' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["720"],["709"],["710"],"React Hook useEffect has missing dependencies: 'disableLoading', 'dispatch', and 'enableLoading'. Either include them or remove the dependency array. If 'enableLoading' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["721"],"'useClickOutside' is defined but never used.","React Hook useEffect has a missing dependency: 'visibleSidebar'. Either include it or remove the dependency array.",["722"],"React Hook useCallback has missing dependencies: 'fetchData' and 'loadMore'. Either include them or remove the dependency array.",["723"],"React Hook useEffect has missing dependencies: 'dispatch' and 'fetchData'. Either include them or remove the dependency array.",["724"],"'FacebookButton' is defined but never used.","'randomNumber' is assigned a value but never used.","'access_token' is assigned a value but never used.","'name' is assigned a value but never used.","'image' is assigned a value but never used.",["725"],["726"],"React Hook useEffect has a missing dependency: 'isPlayAlbum'. Either include it or remove the dependency array.",["727"],"'renderSingers' is assigned a value but never used.","'DEFAULT_PAGE_SIZE' is defined but never used.","'currentPage' is assigned a value but never used.","'setCurrentPage' is assigned a value but never used.",["728"],"React Hook useCallback has a missing dependency: 'hasMore'. Either include it or remove the dependency array.",["729"],["730"],["731"],"React Hook useEffect has missing dependencies: 'albumList' and 'songList'. Either include them or remove the dependency array.",["732"],"'useCallback' is defined but never used.",["733"],"React Hook useEffect has missing dependencies: 'songList' and 'totalPage'. Either include them or remove the dependency array.",["734"],"React Hook useEffect has a missing dependency: 'keyword'. Either include it or remove the dependency array.",["735"],"'NotFoundItem' is defined but never used.","'queryString' is defined but never used.","React Hook React.useEffect has a missing dependency: 'handleClick'. Either include it or remove the dependency array.",["736"],"'renderPages' is assigned a value but never used.",["709"],["710"],"'EXPLORE' is defined but never used.","'SIGN_IN' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"737","fix":"738"},{"desc":"739","fix":"740"},{"desc":"741","fix":"742"},{"desc":"743","fix":"744"},{"desc":"745","fix":"746"},{"desc":"747","fix":"748"},{"desc":"749","fix":"750"},{"desc":"747","fix":"751"},{"desc":"752","fix":"753"},{"desc":"754","fix":"755"},{"desc":"756","fix":"757"},{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},{"desc":"762","fix":"763"},{"desc":"739","fix":"764"},{"desc":"743","fix":"765"},{"desc":"766","fix":"767"},{"desc":"762","fix":"768"},{"desc":"769","fix":"770"},{"desc":"771","fix":"772"},{"desc":"743","fix":"773"},{"desc":"774","fix":"775"},{"desc":"749","fix":"776"},{"desc":"777","fix":"778"},{"desc":"779","fix":"780"},{"desc":"781","fix":"782"},"Update the dependencies array to be: [disableLoading, enableLoading]",{"range":"783","text":"784"},"Update the dependencies array to be: [dispatch]",{"range":"785","text":"786"},"Update the dependencies array to be: [songIndex, songs]",{"range":"787","text":"788"},"Update the dependencies array to be: [dispatch, id]",{"range":"789","text":"790"},"Update the dependencies array to be: [charts, fullChart]",{"range":"791","text":"792"},"Update the dependencies array to be: [id]",{"range":"793","text":"794"},"Update the dependencies array to be: [dispatch, keyword]",{"range":"795","text":"796"},{"range":"797","text":"794"},"Update the dependencies array to be: [albumList, currentPage, id, seeMore, songList]",{"range":"798","text":"799"},"Update the dependencies array to be: [fetchData, loadMore]",{"range":"800","text":"801"},"Update the dependencies array to be: [disableLoading, dispatch, enableLoading]",{"range":"802","text":"803"},"Update the dependencies array to be: [pathname, visibleSidebar]",{"range":"804","text":"805"},"Update the dependencies array to be: [loadMore, hasMore, fetchData]",{"range":"806","text":"807"},"Update the dependencies array to be: [dispatch, fetchData]",{"range":"808","text":"809"},{"range":"810","text":"786"},{"range":"811","text":"790"},"Update the dependencies array to be: [isPlayAlbum, isPlaying]",{"range":"812","text":"813"},{"range":"814","text":"809"},"Update the dependencies array to be: [loadMore, seeMore, hasMore, songList, id]",{"range":"815","text":"816"},"Update the dependencies array to be: [loadMore, seeMore, hasMore, albumList, id]",{"range":"817","text":"818"},{"range":"819","text":"790"},"Update the dependencies array to be: [albumList, seeMore, songList]",{"range":"820","text":"821"},{"range":"822","text":"796"},"Update the dependencies array to be: [currentPage, songList, totalPage]",{"range":"823","text":"824"},"Update the dependencies array to be: [keyword, pathname]",{"range":"825","text":"826"},"Update the dependencies array to be: [handleClick, ref]",{"range":"827","text":"828"},[532,534],"[disableLoading, enableLoading]",[2094,2096],"[dispatch]",[1854,1865],"[songIndex, songs]",[1625,1627],"[dispatch, id]",[1255,1266],"[charts, fullChart]",[1410,1412],"[id]",[4611,4613],"[dispatch, keyword]",[1662,1664],[3084,3093],"[albumList, currentPage, id, seeMore, songList]",[1353,1363],"[fetchData, loadMore]",[600,602],"[disableLoading, dispatch, enableLoading]",[881,891],"[pathname, visibleSidebar]",[1923,1944],"[loadMore, hasMore, fetchData]",[2075,2077],"[dispatch, fetchData]",[2778,2780],[2044,2046],[2168,2179],"[isPlayAlbum, isPlaying]",[1037,1039],[2790,2823],"[loadMore, seeMore, hasMore, songList, id]",[4086,4120],"[loadMore, seeMore, hasMore, albumList, id]",[4536,4538],[5032,5041],"[albumList, seeMore, songList]",[4657,4666],[2117,2130],"[currentPage, songList, totalPage]",[1556,1566],"[keyword, pathname]",[386,391],"[handleClick, ref]"]